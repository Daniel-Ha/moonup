"use strict";var e=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var D=Object.prototype.hasOwnProperty;var y=(s,n)=>{for(var o in n)e(s,o,{get:n[o],enumerable:!0})},h=(s,n,o,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let a of u(n))!D.call(s,a)&&a!==o&&e(s,a,{get:()=>n[a],enumerable:!(t=m(n,a))||t.enumerable});return s};var S=s=>h(e({},"__esModule",{value:!0}),s);var f={};y(f,{MoonSigner:()=>d});module.exports=S(f);var g=require("@ethersproject/abstract-signer"),p=require("@ethersproject/bytes"),T=require("@ethersproject/hash"),c=require("@ethersproject/properties"),i=require("ethers"),d=class s extends g.Signer{constructor(n,o){super(),(0,c.defineReadOnly)(this,"_isSigner",!0),(0,c.defineReadOnly)(this,"provider",o),this.MoonSignerConfig=n,this.SDK=n.SDK}_signTypedData(n,o,t){throw new Error("Method not implemented.")}updateConfig(n){this.SDK=n.SDK,this.MoonSignerConfig=n}connect(n){return new s(this.MoonSignerConfig,n)}async signTypedData(n,o,t){return(await this.SDK.getAccountsSDK().signTypedData(this.MoonSignerConfig.address,{data:JSON.stringify({domain:n,types:o,value:t})}).then(r=>{if(!r.ok)throw new Error(r.statusText);return r.data.data})).signed_message||""}async getAddress(){return this.MoonSignerConfig.address}async signMessage(n){let o=new Uint8Array((0,p.arrayify)((0,T.hashMessage)(n)));return(await this.SDK.getAccountsSDK().signMessage(this.MoonSignerConfig.address,{data:o.toString(),encoding:"utf-8"}).then(a=>{if(!a.ok)throw new Error(a.statusText);return a.data.data})).signed_message||""}async broadcastTransaction(n){let o=await this.SDK.getAccountsSDK().broadcastTx(this.MoonSignerConfig.address,{rawTransaction:n,chainId:this.MoonSignerConfig.chainId});if(!o.ok)throw new Error(o.statusText);return o.data.data.transaction_hash||""}async sendTransaction(n){let o=await this.populateTransaction(n);console.log("Moon::sendTransaction: populateTransaction",o);let t=await this.signTransaction(o);console.log("Moon::sendTransaction: signedRawTx",t);let a=await this.broadcastTransaction(t||"");console.log("Moon::sendTransaction: broadcastTx res",a);let r=await this.provider?.getTransaction(a||"");return console.log("Moon::sendTransaction: txResponse",r),r||{}}transactionRequestToInputBody(n){return{chain_id:i.BigNumber.from(n.chainId).toString(),data:n.data&&n.data?.toString()||"",to:n.to,gasPrice:i.BigNumber.from(n.gasPrice).toString(),gas:i.BigNumber.from(n.gasLimit).toString(),nonce:i.BigNumber.from(n.nonce).toString(),value:n.value!==void 0?i.BigNumber.from(n.value).toString():void 0,encoding:"utf-8"}}moonTransactionResponseToTransactions(n){return n.transactions||[]}async signTransaction(n){return await this.SDK.getAccountsSDK().signTransaction(this.MoonSignerConfig.address,this.transactionRequestToInputBody(n)).then(t=>{if(!t.ok)throw new Error(t.statusText);return this.moonTransactionResponseToTransactions(t.data.data)?.at(0)?.raw_transaction})||""}async getTypedDataDomain(n,o,t,a){return{name:n,version:o,chainId:t,verifyingContract:a}}async getTypedData(n,o,t){return{domain:n,types:o,message:t}}};0&&(module.exports={MoonSigner});
//# sourceMappingURL=signer.js.map