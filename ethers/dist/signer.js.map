{"version":3,"sources":["../src/signer.ts"],"sourcesContent":["import { Provider, TransactionRequest } from '@ethersproject/abstract-provider';\nimport {\n  Signer,\n  TypedDataDomain,\n  TypedDataField,\n  TypedDataSigner,\n} from '@ethersproject/abstract-signer';\nimport { BytesLike, arrayify } from '@ethersproject/bytes';\nimport { hashMessage } from '@ethersproject/hash';\nimport { defineReadOnly } from '@ethersproject/properties';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport type { Transaction as MoonTransaction } from '@moonup/moon-api';\nimport { InputBody, Transaction as MoonAPITransaction } from '@moonup/moon-api';\nimport { MoonSDK } from '@moonup/moon-sdk';\nimport { BigNumber } from 'ethers';\n\nimport { TransactionData } from '../../moon-api/src/lib/data-contracts';\nexport interface Typed {\n  domain: TypedDataDomain;\n  types: Record<string, Array<TypedDataField>>;\n  message: Record<string, string>;\n}\n\nexport interface MoonSignerConfig {\n  SDK: MoonSDK;\n  address: string;\n  chainId: string;\n}\n\nexport class MoonSigner extends Signer implements TypedDataSigner {\n  MoonSignerConfig: MoonSignerConfig;\n  SDK: MoonSDK;\n\n  constructor(config: MoonSignerConfig, provider?: Provider) {\n    super();\n    defineReadOnly(this, '_isSigner', true);\n    defineReadOnly(this, 'provider', provider);\n    this.MoonSignerConfig = config;\n    this.SDK = config.SDK;\n  }\n  _signTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, TypedDataField[]>,\n    value: Record<string, any>\n  ): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n  updateConfig(config: MoonSignerConfig) {\n    this.SDK = config.SDK;\n    this.MoonSignerConfig = config;\n  }\n  connect(provider: Provider): Signer {\n    return new MoonSigner(this.MoonSignerConfig, provider);\n  }\n\n  /**\n   * Signs a typed data object.\n   *\n   * @param domain - The domain of the typed data object.\n   * @param types - The type definitions of the typed data object.\n   * @param value - The value of the typed data object.\n   * @returns The signature of the typed data object.\n   */\n  async signTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, TypedDataField[]>,\n    value: Record<string, string>\n  ): Promise<string> {\n    const response = await this.SDK.getAccountsSDK()\n      .signTypedData(this.MoonSignerConfig.address, {\n        data: JSON.stringify({\n          domain,\n          types,\n          value,\n        }),\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n\n  /**\n   * @summary Get address\n   * @returns {string} successful operation\n   */\n  async getAddress(): Promise<string> {\n    return this.MoonSignerConfig.address;\n  }\n  async signMessage(message: BytesLike): Promise<string> {\n    const hash = new Uint8Array(arrayify(hashMessage(message)));\n    const response = await this.SDK.getAccountsSDK()\n      .signMessage(this.MoonSignerConfig.address, {\n        data: hash.toString(),\n        encoding: 'utf-8',\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n  async broadcastTransaction(signedTransaction: string): Promise<string> {\n    const response = await this.SDK.getAccountsSDK().broadcastTx(\n      this.MoonSignerConfig.address,\n      {\n        rawTransaction: signedTransaction,\n        chainId: this.MoonSignerConfig.chainId,\n      }\n    );\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return (response.data.data as MoonAPITransaction).transaction_hash || '';\n  }\n\n  async sendTransaction(\n    transaction: TransactionRequest\n  ): Promise<TransactionResponse> {\n    const tx = await this.populateTransaction(transaction);\n    console.log('Moon::sendTransaction: populateTransaction', tx);\n    const signedRes = await this.signTransaction(tx);\n    console.log('Moon::sendTransaction: signedRawTx', signedRes);\n\n    const response = await this.broadcastTransaction(signedRes || '');\n    console.log('Moon::sendTransaction: broadcastTx res', response);\n    const txResponse = await this.provider?.getTransaction(response || '');\n    console.log('Moon::sendTransaction: txResponse', txResponse);\n\n    return txResponse || ({} as TransactionResponse);\n  }\n  public transactionRequestToInputBody(tx: TransactionRequest): InputBody {\n    return {\n      chain_id: BigNumber.from(tx.chainId).toString(),\n      data: (tx.data && tx.data?.toString()) || '',\n      to: tx.to,\n      gasPrice: BigNumber.from(tx.gasPrice).toString(),\n      gas: BigNumber.from(tx.gasLimit).toString(),\n      nonce: BigNumber.from(tx.nonce).toString(),\n      value:\n        tx.value !== undefined\n          ? BigNumber.from(tx.value).toString()\n          : undefined,\n      encoding: 'utf-8',\n    };\n  }\n  moonTransactionResponseToTransactions(\n    tx: MoonTransaction\n  ): TransactionData[] {\n    return tx.transactions || [];\n  }\n\n  async signTransaction(transaction: TransactionRequest): Promise<string> {\n    const response = await this.SDK.getAccountsSDK()\n      .signTransaction(\n        this.MoonSignerConfig.address,\n        this.transactionRequestToInputBody(transaction)\n      )\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const transactions = this.moonTransactionResponseToTransactions(\n          res.data.data as MoonTransaction\n        );\n        const rawTransaction = transactions?.at(0)?.raw_transaction;\n        return rawTransaction as string;\n      });\n    return response || '';\n  }\n  async getTypedDataDomain(\n    name: string,\n    version: string,\n    chainId: number,\n    verifyingContract: string\n  ): Promise<TypedDataDomain> {\n    return {\n      name,\n      version,\n      chainId,\n      verifyingContract,\n    };\n  }\n\n  async getTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    message: Record<string, string>\n  ): Promise<Typed> {\n    return {\n      domain,\n      types,\n      message,\n    };\n  }\n}\n"],"mappings":"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","names":["signer_exports","__export","MoonSigner","__toCommonJS","import_abstract_signer","import_bytes","import_hash","import_properties","import_ethers","_MoonSigner","config","provider","domain","types","value","res","message","hash","signedTransaction","response","transaction","tx","signedRes","txResponse","name","version","chainId","verifyingContract"]}