{"version":3,"sources":["../src/json-rpc-provider.ts","../src/signer.ts","../src/utils.ts"],"sourcesContent":["import { MoonSDK } from '@moonup/moon-sdk';\nimport { getRpcUrls } from '@moonup/moon-types';\nimport { RequestArguments } from 'eip1193-provider';\nimport { providers } from 'ethers';\n\nimport { MoonSigner } from './signer';\nimport { MoonProviderOptions } from './types';\nimport { getMessage, getSignTypedDataParamsData } from './utils';\n\nexport class JsonRpcProvider {\n  public chainId: number;\n  public http: providers.JsonRpcProvider;\n  public sdk: MoonSDK;\n  public signer: MoonSigner;\n  public config: MoonProviderOptions;\n\n  constructor(options: MoonProviderOptions) {\n    this.config = options;\n    this.chainId = options.chainId;\n\n    const nodeRPC = getRpcUrls(this.chainId).pop() || '';\n    this.sdk = options.SDK;\n    this.http = new providers.JsonRpcProvider(nodeRPC);\n\n    this.signer = new MoonSigner({\n      SDK: this.sdk,\n      address: options.address,\n      chainId: this.chainId.toString(),\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async request(request: RequestArguments): Promise<any> {\n    switch (request.method) {\n      case 'eth_requestAccounts':\n        // eslint-disable-next-line no-case-declarations\n        const keys = await this.sdk.listAccounts();\n        return keys.keys || [];\n      case 'personal_sign':\n        if (Array.isArray(request.params) && request.params.length > 0) {\n          const message = getMessage(request?.params as string[]);\n          const signedMessage = await this.signer.signMessage(message);\n          return signedMessage;\n        } else {\n          throw new Error('request.params is undefined or not an array');\n        }\n      case 'eth_signTypedData':\n        if (Array.isArray(request.params) && request.params.length > 0) {\n          const typedData = getSignTypedDataParamsData(\n            request?.params as string[]\n          );\n\n          const signedTypedData = await this.signer.signTypedData(\n            typedData.domain,\n            typedData.types,\n            typedData.value\n          );\n          return signedTypedData || '';\n        } else {\n          throw new Error('request.params is undefined or not an array');\n        }\n\n      case 'eth_sendTransaction':\n        // eslint-disable-next-line no-case-declarations\n        const _params =\n          request?.params &&\n          Array.isArray(request?.params) &&\n          request?.params[0]\n            ? request?.params[0]\n            : undefined;\n        if (_params) {\n          return await this.signer.sendTransaction(_params);\n        }\n        throw new Error('eth_sendTransaction error');\n      default:\n        return await this.http.send(\n          request.method,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (request.params || []) as Array<any>\n        );\n    }\n  }\n\n  public updateConfig(options: MoonProviderOptions) {\n    this.chainId = options.chainId;\n    this.sdk = options.SDK;\n    this.http = new providers.JsonRpcProvider(\n      getRpcUrls(this.chainId).pop() || ''\n    );\n    this.signer.updateConfig({\n      SDK: this.sdk,\n      address: '',\n      chainId: this.chainId.toString(),\n    });\n  }\n}\n","import { Provider, TransactionRequest } from '@ethersproject/abstract-provider';\nimport {\n  Signer,\n  TypedDataDomain,\n  TypedDataField,\n  TypedDataSigner,\n} from '@ethersproject/abstract-signer';\nimport { BytesLike, arrayify } from '@ethersproject/bytes';\nimport { hashMessage } from '@ethersproject/hash';\nimport { defineReadOnly } from '@ethersproject/properties';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport type { Transaction as MoonTransaction } from '@moonup/moon-api';\nimport { InputBody, Transaction as MoonAPITransaction } from '@moonup/moon-api';\nimport { MoonSDK } from '@moonup/moon-sdk';\nimport { BigNumber } from 'ethers';\n\nimport { TransactionData } from '../../moon-api/src/lib/data-contracts';\nexport interface Typed {\n  domain: TypedDataDomain;\n  types: Record<string, Array<TypedDataField>>;\n  message: Record<string, string>;\n}\n\nexport interface MoonSignerConfig {\n  SDK: MoonSDK;\n  address: string;\n  chainId: string;\n}\n\nexport class MoonSigner extends Signer implements TypedDataSigner {\n  MoonSignerConfig: MoonSignerConfig;\n  SDK: MoonSDK;\n\n  constructor(config: MoonSignerConfig, provider?: Provider) {\n    super();\n    defineReadOnly(this, '_isSigner', true);\n    defineReadOnly(this, 'provider', provider);\n    this.MoonSignerConfig = config;\n    this.SDK = config.SDK;\n  }\n  _signTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, TypedDataField[]>,\n    value: Record<string, any>\n  ): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n  updateConfig(config: MoonSignerConfig) {\n    this.SDK = config.SDK;\n    this.MoonSignerConfig = config;\n  }\n  connect(provider: Provider): Signer {\n    return new MoonSigner(this.MoonSignerConfig, provider);\n  }\n\n  /**\n   * Signs a typed data object.\n   *\n   * @param domain - The domain of the typed data object.\n   * @param types - The type definitions of the typed data object.\n   * @param value - The value of the typed data object.\n   * @returns The signature of the typed data object.\n   */\n  async signTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, TypedDataField[]>,\n    value: Record<string, string>\n  ): Promise<string> {\n    const response = await this.SDK.getAccountsSDK()\n      .signTypedData(this.MoonSignerConfig.address, {\n        data: JSON.stringify({\n          domain,\n          types,\n          value,\n        }),\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n\n  /**\n   * @summary Get address\n   * @returns {string} successful operation\n   */\n  async getAddress(): Promise<string> {\n    return this.MoonSignerConfig.address;\n  }\n  async signMessage(message: BytesLike): Promise<string> {\n    const hash = new Uint8Array(arrayify(hashMessage(message)));\n    const response = await this.SDK.getAccountsSDK()\n      .signMessage(this.MoonSignerConfig.address, {\n        data: hash.toString(),\n        encoding: 'utf-8',\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n  async broadcastTransaction(signedTransaction: string): Promise<string> {\n    const response = await this.SDK.getAccountsSDK().broadcastTx(\n      this.MoonSignerConfig.address,\n      {\n        rawTransaction: signedTransaction,\n        chainId: this.MoonSignerConfig.chainId,\n      }\n    );\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return (response.data.data as MoonAPITransaction).transaction_hash || '';\n  }\n\n  async sendTransaction(\n    transaction: TransactionRequest\n  ): Promise<TransactionResponse> {\n    const tx = await this.populateTransaction(transaction);\n    console.log('Moon::sendTransaction: populateTransaction', tx);\n    const signedRes = await this.signTransaction(tx);\n    console.log('Moon::sendTransaction: signedRawTx', signedRes);\n\n    const response = await this.broadcastTransaction(signedRes || '');\n    console.log('Moon::sendTransaction: broadcastTx res', response);\n    const txResponse = await this.provider?.getTransaction(response || '');\n    console.log('Moon::sendTransaction: txResponse', txResponse);\n\n    return txResponse || ({} as TransactionResponse);\n  }\n  public transactionRequestToInputBody(tx: TransactionRequest): InputBody {\n    return {\n      chain_id: BigNumber.from(tx.chainId).toString(),\n      data: (tx.data && tx.data?.toString()) || '',\n      to: tx.to,\n      gasPrice: BigNumber.from(tx.gasPrice).toString(),\n      gas: BigNumber.from(tx.gasLimit).toString(),\n      nonce: BigNumber.from(tx.nonce).toString(),\n      value:\n        tx.value !== undefined\n          ? BigNumber.from(tx.value).toString()\n          : undefined,\n      encoding: 'utf-8',\n    };\n  }\n  moonTransactionResponseToTransactions(\n    tx: MoonTransaction\n  ): TransactionData[] {\n    return tx.transactions || [];\n  }\n\n  async signTransaction(transaction: TransactionRequest): Promise<string> {\n    const response = await this.SDK.getAccountsSDK()\n      .signTransaction(\n        this.MoonSignerConfig.address,\n        this.transactionRequestToInputBody(transaction)\n      )\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const transactions = this.moonTransactionResponseToTransactions(\n          res.data.data as MoonTransaction\n        );\n        const rawTransaction = transactions?.at(0)?.raw_transaction;\n        return rawTransaction as string;\n      });\n    return response || '';\n  }\n  async getTypedDataDomain(\n    name: string,\n    version: string,\n    chainId: number,\n    verifyingContract: string\n  ): Promise<TypedDataDomain> {\n    return {\n      name,\n      version,\n      chainId,\n      verifyingContract,\n    };\n  }\n\n  async getTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    message: Record<string, string>\n  ): Promise<Typed> {\n    return {\n      domain,\n      types,\n      message,\n    };\n  }\n}\n","import {\n  TypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\nimport { arrayify } from '@ethersproject/bytes';\nimport { hashMessage } from '@ethersproject/hash';\nimport { utils } from 'ethers';\n\nexport interface TypedData {\n  domain: TypedDataDomain;\n  types: Record<string, Array<TypedDataField>>;\n  value: Record<string, string>;\n}\n\nexport const getMessage = (params: string[]) => {\n  const message = params.filter((p) => !utils.isAddress(p))[0];\n  const hash = new Uint8Array(arrayify(hashMessage(message)));\n  return hash;\n};\n\nexport const getSignTypedDataParamsData = (params: string[]) => {\n  const data = params.filter((p) => !utils.isAddress(p))[0];\n\n  if (typeof data === 'string') {\n    return JSON.parse(data) as TypedData;\n  }\n\n  return data;\n};\n"],"mappings":"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","names":["getRpcUrls","providers","Signer","arrayify","hashMessage","defineReadOnly","BigNumber","MoonSigner","_MoonSigner","config","provider","domain","types","value","res","message","hash","signedTransaction","response","transaction","tx","signedRes","txResponse","name","version","chainId","verifyingContract","arrayify","hashMessage","utils","getMessage","params","message","p","getSignTypedDataParamsData","data","JsonRpcProvider","options","nodeRPC","getRpcUrls","providers","MoonSigner","request","message","getMessage","typedData","getSignTypedDataParamsData","_params"]}