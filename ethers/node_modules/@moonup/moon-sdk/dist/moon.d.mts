import * as _supabase_supabase_js from '@supabase/supabase-js';
import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer';
import { BytesLike } from '@ethersproject/bytes';
import { Solana, Bitcoin, Cosmos, Eos, Litecoin, Ripple, Tron, Bitcoincash, Dogecoin, Auth, Accounts, Aave, Conveyorfinance, Ens, Erc20, Erc1155, Erc721, Erc4337, Oneinch, Uniswap, Yearn, AccountResponse, Transaction, TransactionData, InputBody, BroadCastRawTransactionResponse } from '@moonup/moon-api';

declare class MoonSDK {
    private AccountsSDK;
    private AaveSDK;
    private ConveyorfinanceSDK;
    private ENSSDK;
    private Erc20SDK;
    private Erc1155SDK;
    private Erc721SDK;
    private Erc4337SDK;
    private OneinchSDK;
    private UniswapSDK;
    private YearnSDK;
    private AuthSDK;
    private BitcoinSDK;
    private SolanaSDK;
    private CosmosSDK;
    private EosSDK;
    private LitecoinSDK;
    private RippleSDK;
    private TronSDK;
    private BitcoincashSDK;
    private DogecoinSDK;
    private MoonAPIClient;
    isAuthenticated: boolean;
    constructor();
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    getUserSession(): Promise<{
        data: {
            session: _supabase_supabase_js.AuthSession;
        };
        error: null;
    } | {
        data: {
            session: null;
        };
        error: _supabase_supabase_js.AuthError;
    } | {
        data: {
            session: null;
        };
        error: null;
    }>;
    setAccessToken(token: string, refreshToken: string): Promise<_supabase_supabase_js.AuthResponse>;
    getSolanaSDK(): Solana;
    getBitcoinSDK(): Bitcoin;
    getCosmosSDK(): Cosmos;
    getEosSDK(): Eos;
    getLitecoinSDK(): Litecoin;
    getRippleSDK(): Ripple;
    getTronSDK(): Tron;
    getBitcoincashSDK(): Bitcoincash;
    getDogecoinSDK(): Dogecoin;
    getAuthSDK(): Auth;
    getAccountsSDK(): Accounts;
    getAaveSDK(): Aave;
    getConveyorfinanceSDK(): Conveyorfinance;
    getENSSDK(): Ens;
    getErc20SDK(): Erc20;
    getErc1155SDK(): Erc1155;
    getErc721SDK(): Erc721;
    getErc4337SDK(): Erc4337;
    getOneinchSDK(): Oneinch;
    getUniswapSDK(): Uniswap;
    getYearnSDK(): Yearn;
    updateToken(token: string): void;
    listAccounts(): Promise<AccountResponse>;
    createAccount(): Promise<AccountResponse>;
    moonTransactionResponseToTransactions(tx: Transaction): TransactionData[];
    SignTransaction(wallet: string, transaction: InputBody): Promise<string>;
    SignMessage(wallet: string, message: BytesLike): Promise<string>;
    SignTypedData(wallet: string, domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, string>): Promise<string>;
    SendTransaction(wallet: string, rawTransaction: string, chain_id: string): Promise<BroadCastRawTransactionResponse>;
}

export { MoonSDK };
