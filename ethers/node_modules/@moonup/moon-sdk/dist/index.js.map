{"version":3,"sources":["../src/index.ts","../src/moon.ts"],"sourcesContent":["export * from './moon';\n","import {\n  TypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\nimport { BytesLike, arrayify } from '@ethersproject/bytes';\nimport { hashMessage } from '@ethersproject/hash';\nimport {\n  Aave,\n  AccountResponse,\n  Accounts,\n  ApiConfig,\n  Auth,\n  Bitcoin,\n  Bitcoincash,\n  BroadCastRawTransactionResponse,\n  ContentType,\n  Conveyorfinance,\n  Cosmos,\n  Dogecoin,\n  Ens,\n  Eos,\n  Erc1155,\n  Erc20,\n  Erc4337,\n  Erc721,\n  InputBody,\n  Litecoin,\n  Transaction as MoonTransaction,\n  Oneinch,\n  Ripple,\n  Solana,\n  TransactionData,\n  Tron,\n  Uniswap,\n  Yearn,\n} from '@moonup/moon-api';\nimport { SupabaseClient, createClient } from '@supabase/supabase-js';\n\nexport class MoonSDK {\n  private AccountsSDK: Accounts;\n  private AaveSDK: Aave;\n  private ConveyorfinanceSDK: Conveyorfinance;\n  private ENSSDK: Ens;\n  private Erc20SDK: Erc20;\n  private Erc1155SDK: Erc1155;\n  private Erc721SDK: Erc721;\n  private Erc4337SDK: Erc4337;\n  private OneinchSDK: Oneinch;\n  private UniswapSDK: Uniswap;\n  private YearnSDK: Yearn;\n  private AuthSDK: Auth;\n  private BitcoinSDK: Bitcoin;\n  private SolanaSDK: Solana;\n  private CosmosSDK: Cosmos;\n  private EosSDK: Eos;\n  private LitecoinSDK: Litecoin;\n  private RippleSDK: Ripple;\n  private TronSDK: Tron;\n  private BitcoincashSDK: Bitcoincash;\n  private DogecoinSDK: Dogecoin;\n  private MoonAPIClient: SupabaseClient;\n  isAuthenticated = false;\n\n  constructor() {\n    const baseApiParams: ApiConfig = {\n      baseUrl:\n        'https://moon-vault-api-git-ew-supabase-migration-moonup.vercel.app',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      securityWorker: async (securityData: any) => {\n        return Promise.resolve({\n          headers: {\n            Authorization: `Bearer ${securityData.token}`,\n          },\n        });\n      },\n    };\n    this.AccountsSDK = new Accounts(baseApiParams);\n\n    this.AuthSDK = new Auth(baseApiParams);\n\n    this.AaveSDK = new Aave(baseApiParams);\n\n    this.ENSSDK = new Ens(baseApiParams);\n\n    this.Erc20SDK = new Erc20(baseApiParams);\n\n    this.Erc1155SDK = new Erc1155(baseApiParams);\n\n    this.Erc721SDK = new Erc721(baseApiParams);\n\n    this.Erc4337SDK = new Erc4337(baseApiParams);\n\n    this.OneinchSDK = new Oneinch(baseApiParams);\n\n    this.UniswapSDK = new Uniswap(baseApiParams);\n\n    this.YearnSDK = new Yearn(baseApiParams);\n\n    this.ConveyorfinanceSDK = new Conveyorfinance(baseApiParams);\n\n    this.BitcoinSDK = new Bitcoin(baseApiParams);\n\n    this.BitcoincashSDK = new Bitcoincash(baseApiParams);\n\n    this.DogecoinSDK = new Dogecoin(baseApiParams);\n\n    this.SolanaSDK = new Solana(baseApiParams);\n    this.CosmosSDK = new Cosmos(baseApiParams);\n\n    this.EosSDK = new Eos(baseApiParams);\n\n    this.LitecoinSDK = new Litecoin(baseApiParams);\n\n    this.RippleSDK = new Ripple(baseApiParams);\n\n    this.TronSDK = new Tron(baseApiParams);\n    this.MoonAPIClient = createClient('https://api.usemoon.ai', '', {});\n    this.connect();\n  }\n  public async connect() {\n    this.MoonAPIClient.auth.onAuthStateChange((event, session) => {\n      if (event === 'SIGNED_IN') {\n        this.setAccessToken(\n          session?.access_token || '',\n          session?.refresh_token || ''\n        );\n        this.isAuthenticated = true;\n      }\n      if (event === 'TOKEN_REFRESHED') {\n        this.setAccessToken(\n          session?.access_token || '',\n          session?.refresh_token || ''\n        );\n        this.isAuthenticated = true;\n      }\n      if (event === 'SIGNED_OUT') {\n        this.updateToken('');\n        this.isAuthenticated = false;\n      }\n    });\n\n    const { data, error } = await this.MoonAPIClient.auth.getSession();\n    if (data) {\n      this.setAccessToken(\n        data.session?.access_token || '',\n        data.session?.refresh_token || ''\n      );\n      this.isAuthenticated = true;\n    }\n    if (error) {\n      this.isAuthenticated = false;\n    }\n  }\n  public async disconnect() {\n    this.MoonAPIClient.auth.signOut();\n    this.updateToken('');\n    this.isAuthenticated = false;\n  }\n\n  public async getUserSession() {\n    return await this.MoonAPIClient.auth.getSession();\n  }\n  public async setAccessToken(token: string, refreshToken: string) {\n    this.updateToken(token);\n    return await this.MoonAPIClient.auth.setSession({\n      access_token: token,\n      refresh_token: refreshToken,\n    });\n  }\n\n  public getSolanaSDK(): Solana {\n    return this.SolanaSDK;\n  }\n\n  public getBitcoinSDK(): Bitcoin {\n    return this.BitcoinSDK;\n  }\n\n  public getCosmosSDK(): Cosmos {\n    return this.CosmosSDK;\n  }\n\n  public getEosSDK(): Eos {\n    return this.EosSDK;\n  }\n\n  public getLitecoinSDK(): Litecoin {\n    return this.LitecoinSDK;\n  }\n\n  public getRippleSDK(): Ripple {\n    return this.RippleSDK;\n  }\n\n  public getTronSDK(): Tron {\n    return this.TronSDK;\n  }\n\n  public getBitcoincashSDK(): Bitcoincash {\n    return this.BitcoincashSDK;\n  }\n\n  public getDogecoinSDK(): Dogecoin {\n    return this.DogecoinSDK;\n  }\n\n  public getAuthSDK(): Auth {\n    return this.AuthSDK;\n  }\n\n  public getAccountsSDK(): Accounts {\n    return this.AccountsSDK;\n  }\n\n  public getAaveSDK(): Aave {\n    return this.AaveSDK;\n  }\n\n  public getConveyorfinanceSDK(): Conveyorfinance {\n    return this.ConveyorfinanceSDK;\n  }\n\n  public getENSSDK(): Ens {\n    return this.ENSSDK;\n  }\n\n  public getErc20SDK(): Erc20 {\n    return this.Erc20SDK;\n  }\n\n  public getErc1155SDK(): Erc1155 {\n    return this.Erc1155SDK;\n  }\n\n  public getErc721SDK(): Erc721 {\n    return this.Erc721SDK;\n  }\n\n  public getErc4337SDK(): Erc4337 {\n    return this.Erc4337SDK;\n  }\n\n  public getOneinchSDK(): Oneinch {\n    return this.OneinchSDK;\n  }\n\n  public getUniswapSDK(): Uniswap {\n    return this.UniswapSDK;\n  }\n\n  public getYearnSDK(): Yearn {\n    return this.YearnSDK;\n  }\n\n  public updateToken(token: string) {\n    this.BitcoinSDK.setSecurityData({\n      token: token,\n    });\n    this.AccountsSDK.setSecurityData({\n      token: token,\n    });\n    this.AaveSDK.setSecurityData({\n      token: token,\n    });\n    this.ConveyorfinanceSDK.setSecurityData({\n      token: token,\n    });\n    this.ENSSDK.setSecurityData({\n      token: token,\n    });\n    this.Erc20SDK.setSecurityData({\n      token: token,\n    });\n    this.Erc1155SDK.setSecurityData({\n      token: token,\n    });\n    this.Erc721SDK.setSecurityData({\n      token: token,\n    });\n    this.Erc4337SDK.setSecurityData({\n      token: token,\n    });\n    this.OneinchSDK.setSecurityData({\n      token: token,\n    });\n    this.UniswapSDK.setSecurityData({\n      token: token,\n    });\n    this.SolanaSDK.setSecurityData({\n      token: token,\n    });\n\n    this.CosmosSDK.setSecurityData({\n      token: token,\n    });\n\n    this.EosSDK.setSecurityData({\n      token: token,\n    });\n\n    this.LitecoinSDK.setSecurityData({\n      token: token,\n    });\n\n    this.RippleSDK.setSecurityData({\n      token: token,\n    });\n\n    this.TronSDK.setSecurityData({\n      token: token,\n    });\n\n    this.BitcoincashSDK.setSecurityData({\n      token: token,\n    });\n\n    this.DogecoinSDK.setSecurityData({\n      token: token,\n    });\n  }\n\n  public async listAccounts(): Promise<AccountResponse> {\n    const response = await this.getAccountsSDK().listAccounts();\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.data as AccountResponse;\n  }\n  public async createAccount(): Promise<AccountResponse> {\n    const response = await this.getAccountsSDK().createAccount({});\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.data as AccountResponse;\n  }\n\n  moonTransactionResponseToTransactions(\n    tx: MoonTransaction\n  ): TransactionData[] {\n    return tx.transactions || [];\n  }\n\n  public async SignTransaction(\n    wallet: string,\n    transaction: InputBody\n  ): Promise<string> {\n    const response = await this.getAccountsSDK()\n      .signTransaction(wallet, transaction)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const transactions = this.moonTransactionResponseToTransactions(\n          res.data.data as MoonTransaction\n        );\n        const rawTransaction = transactions?.at(0)?.raw_transaction;\n        return rawTransaction as string;\n      });\n    return response || '';\n  }\n\n  public async SignMessage(\n    wallet: string,\n    message: BytesLike\n  ): Promise<string> {\n    const hash = new Uint8Array(arrayify(hashMessage(message)));\n    const response = await this.getAccountsSDK()\n      .signMessage(wallet, {\n        data: hash.toString(),\n        encoding: 'utf-8',\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n\n  public async SignTypedData(\n    wallet: string,\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    value: Record<string, string>\n  ): Promise<string> {\n    const response = await this.getAccountsSDK()\n      .signTypedData(wallet, {\n        data: JSON.stringify({\n          domain,\n          types,\n          value,\n        }),\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n\n  public async SendTransaction(\n    wallet: string,\n    rawTransaction: string,\n    chain_id: string\n  ): Promise<BroadCastRawTransactionResponse> {\n    const response = await this.getAccountsSDK().broadcastTx(wallet, {\n      rawTransaction: rawTransaction,\n      chainId: chain_id,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.data.data as BroadCastRawTransactionResponse;\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","MoonSDK","__toCommonJS","import_bytes","import_hash","import_moon_api","import_supabase_js","MoonSDK","baseApiParams","securityData","event","session","data","error","token","refreshToken","response","tx","wallet","transaction","res","message","hash","domain","types","value","rawTransaction","chain_id"]}