import{arrayify as o}from"@ethersproject/bytes";import{hashMessage as c}from"@ethersproject/hash";import{Aave as u,Accounts as S,Auth as D,Bitcoin as h,Bitcoincash as p,ContentType as K,Conveyorfinance as g,Cosmos as l,Dogecoin as A,Ens as E,Eos as w,Erc1155 as y,Erc20 as T,Erc4337 as d,Erc721 as b,Litecoin as f,Oneinch as m,Ripple as v,Solana as C,Tron as k,Uniswap as R,Yearn as B}from"@moonup/moon-api";import{createClient as P}from"@supabase/supabase-js";var r=class{constructor(){this.isAuthenticated=!1;let t={baseUrl:"https://moon-vault-api-git-ew-supabase-migration-moonup.vercel.app",baseApiParams:{secure:!0,type:K.Json,format:"json"},securityWorker:async i=>Promise.resolve({headers:{Authorization:`Bearer ${i.token}`}})};this.AccountsSDK=new S(t),this.AuthSDK=new D(t),this.AaveSDK=new u(t),this.ENSSDK=new E(t),this.Erc20SDK=new T(t),this.Erc1155SDK=new y(t),this.Erc721SDK=new b(t),this.Erc4337SDK=new d(t),this.OneinchSDK=new m(t),this.UniswapSDK=new R(t),this.YearnSDK=new B(t),this.ConveyorfinanceSDK=new g(t),this.BitcoinSDK=new h(t),this.BitcoincashSDK=new p(t),this.DogecoinSDK=new A(t),this.SolanaSDK=new C(t),this.CosmosSDK=new l(t),this.EosSDK=new w(t),this.LitecoinSDK=new f(t),this.RippleSDK=new v(t),this.TronSDK=new k(t),this.MoonAPIClient=P("https://api.usemoon.ai","",{}),this.connect()}async connect(){this.MoonAPIClient.auth.onAuthStateChange((n,e)=>{n==="SIGNED_IN"&&(this.setAccessToken(e?.access_token||"",e?.refresh_token||""),this.isAuthenticated=!0),n==="TOKEN_REFRESHED"&&(this.setAccessToken(e?.access_token||"",e?.refresh_token||""),this.isAuthenticated=!0),n==="SIGNED_OUT"&&(this.updateToken(""),this.isAuthenticated=!1)});let{data:t,error:i}=await this.MoonAPIClient.auth.getSession();t&&(this.setAccessToken(t.session?.access_token||"",t.session?.refresh_token||""),this.isAuthenticated=!0),i&&(this.isAuthenticated=!1)}async disconnect(){this.MoonAPIClient.auth.signOut(),this.updateToken(""),this.isAuthenticated=!1}async getUserSession(){return await this.MoonAPIClient.auth.getSession()}async setAccessToken(t,i){return this.updateToken(t),await this.MoonAPIClient.auth.setSession({access_token:t,refresh_token:i})}getSolanaSDK(){return this.SolanaSDK}getBitcoinSDK(){return this.BitcoinSDK}getCosmosSDK(){return this.CosmosSDK}getEosSDK(){return this.EosSDK}getLitecoinSDK(){return this.LitecoinSDK}getRippleSDK(){return this.RippleSDK}getTronSDK(){return this.TronSDK}getBitcoincashSDK(){return this.BitcoincashSDK}getDogecoinSDK(){return this.DogecoinSDK}getAuthSDK(){return this.AuthSDK}getAccountsSDK(){return this.AccountsSDK}getAaveSDK(){return this.AaveSDK}getConveyorfinanceSDK(){return this.ConveyorfinanceSDK}getENSSDK(){return this.ENSSDK}getErc20SDK(){return this.Erc20SDK}getErc1155SDK(){return this.Erc1155SDK}getErc721SDK(){return this.Erc721SDK}getErc4337SDK(){return this.Erc4337SDK}getOneinchSDK(){return this.OneinchSDK}getUniswapSDK(){return this.UniswapSDK}getYearnSDK(){return this.YearnSDK}updateToken(t){this.BitcoinSDK.setSecurityData({token:t}),this.AccountsSDK.setSecurityData({token:t}),this.AaveSDK.setSecurityData({token:t}),this.ConveyorfinanceSDK.setSecurityData({token:t}),this.ENSSDK.setSecurityData({token:t}),this.Erc20SDK.setSecurityData({token:t}),this.Erc1155SDK.setSecurityData({token:t}),this.Erc721SDK.setSecurityData({token:t}),this.Erc4337SDK.setSecurityData({token:t}),this.OneinchSDK.setSecurityData({token:t}),this.UniswapSDK.setSecurityData({token:t}),this.SolanaSDK.setSecurityData({token:t}),this.CosmosSDK.setSecurityData({token:t}),this.EosSDK.setSecurityData({token:t}),this.LitecoinSDK.setSecurityData({token:t}),this.RippleSDK.setSecurityData({token:t}),this.TronSDK.setSecurityData({token:t}),this.BitcoincashSDK.setSecurityData({token:t}),this.DogecoinSDK.setSecurityData({token:t})}async listAccounts(){let t=await this.getAccountsSDK().listAccounts();if(!t.ok)throw new Error(t.statusText);return t.data}async createAccount(){let t=await this.getAccountsSDK().createAccount({});if(!t.ok)throw new Error(t.statusText);return t.data}moonTransactionResponseToTransactions(t){return t.transactions||[]}async SignTransaction(t,i){return await this.getAccountsSDK().signTransaction(t,i).then(e=>{if(!e.ok)throw new Error(e.statusText);return this.moonTransactionResponseToTransactions(e.data.data)?.at(0)?.raw_transaction})||""}async SignMessage(t,i){let n=new Uint8Array(o(c(i)));return(await this.getAccountsSDK().signMessage(t,{data:n.toString(),encoding:"utf-8"}).then(s=>{if(!s.ok)throw new Error(s.statusText);return s.data.data})).signed_message||""}async SignTypedData(t,i,n,e){return(await this.getAccountsSDK().signTypedData(t,{data:JSON.stringify({domain:i,types:n,value:e})}).then(a=>{if(!a.ok)throw new Error(a.statusText);return a.data.data})).signed_message||""}async SendTransaction(t,i,n){let e=await this.getAccountsSDK().broadcastTx(t,{rawTransaction:i,chainId:n});if(!e.ok)throw new Error(e.statusText);return e.data.data}};export{r as MoonSDK};
//# sourceMappingURL=index.mjs.map