{"version":3,"sources":["../../src/auth/http-client.ts","../../src/auth/Auth.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport type QueryParamsType = Record<string | number, any>;\nexport type ResponseFormat = keyof Omit<Body, \"body\" | \"bodyUsed\">;\n\nexport interface FullRequestParams extends Omit<RequestInit, \"body\"> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat;\n  /** request body */\n  body?: unknown;\n  /** base url */\n  baseUrl?: string;\n  /** request cancellation token */\n  cancelToken?: CancelToken;\n}\n\nexport type RequestParams = Omit<FullRequestParams, \"body\" | \"method\" | \"query\" | \"path\">;\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string;\n  baseApiParams?: Omit<RequestParams, \"baseUrl\" | \"cancelToken\" | \"signal\">;\n  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;\n  customFetch?: typeof fetch;\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {\n  data: D;\n  error: E;\n}\n\ntype CancelToken = Symbol | string | number;\n\nexport enum ContentType {\n  Json = \"application/json\",\n  FormData = \"multipart/form-data\",\n  UrlEncoded = \"application/x-www-form-urlencoded\",\n  Text = \"text/plain\",\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = \"https://vault-api.usemoon.ai/\";\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>[\"securityWorker\"];\n  private abortControllers = new Map<CancelToken, AbortController>();\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);\n\n  private baseApiParams: RequestParams = {\n    credentials: \"same-origin\",\n    headers: {},\n    redirect: \"follow\",\n    referrerPolicy: \"no-referrer\",\n  };\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig);\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key);\n    return `${encodedKey}=${encodeURIComponent(typeof value === \"number\" ? value : `${value}`)}`;\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key]);\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key];\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join(\"&\");\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n    return keys\n      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))\n      .join(\"&\");\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : \"\";\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) =>\n      input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n    [ContentType.Text]: (input: any) => (input !== null && typeof input !== \"string\" ? JSON.stringify(input) : input),\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key];\n        formData.append(\n          key,\n          property instanceof Blob\n            ? property\n            : typeof property === \"object\" && property !== null\n            ? JSON.stringify(property)\n            : `${property}`,\n        );\n        return formData;\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),\n  };\n\n  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken);\n      if (abortController) {\n        return abortController.signal;\n      }\n      return void 0;\n    }\n\n    const abortController = new AbortController();\n    this.abortControllers.set(cancelToken, abortController);\n    return abortController.signal;\n  };\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken);\n\n    if (abortController) {\n      abortController.abort();\n      this.abortControllers.delete(cancelToken);\n    }\n  };\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<HttpResponse<T, E>> => {\n    const secureParams =\n      ((typeof secure === \"boolean\" ? secure : this.baseApiParams.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const queryString = query && this.toQueryString(query);\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n    const responseFormat = format || requestParams.format;\n\n    return this.customFetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n      ...requestParams,\n      headers: {\n        ...(requestParams.headers || {}),\n        ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n      },\n      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,\n      body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body),\n    }).then(async (response) => {\n      const r = response as HttpResponse<T, E>;\n      r.data = null as unknown as T;\n      r.error = null as unknown as E;\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then((data) => {\n              if (r.ok) {\n                r.data = data;\n              } else {\n                r.error = data;\n              }\n              return r;\n            })\n            .catch((e) => {\n              r.error = e;\n              return r;\n            });\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken);\n      }\n\n      if (!response.ok) throw data;\n      return data;\n    });\n  };\n}\n","import {\n  CreateOauth2ClientInput,\n  CreateOauth2ClientResponse,\n  Disable2faInput,\n  DiscordCallbackInput,\n  DiscordCallbackResponse,\n  EmailLoginInput,\n  EmailLoginResponse,\n  EmailSignupInput,\n  EmailSignupResponse,\n  Enable2faInput,\n  GithubCallbackInput,\n  GithubCallbackResponse,\n  GoogleAltCallbackInput,\n  GoogleCallbackInput,\n  GoogleCallbackResponse,\n  MoonOauth2AuthorizeInput,\n  MoonOauth2AuthorizeResponse,\n  MoonOauth2ExchangeInput,\n  MoonOauth2ExchangeResponse,\n  MoonOauth2QueryParamsInput,\n  ProfileResponse,\n  RefreshTokenInput,\n  RefreshTokenResponse,\n  ResetPasswordConfirmInput,\n  ResetPasswordConfirmResponse,\n  ResetPasswordInput,\n  ResetPasswordResponse,\n  Verify2faInput,\n  Verify2faResponse,\n  WebAuthNRegisterVerifyInput,\n  WebAuthNRegisterVerifyResponse,\n  WebAuthnLoginInput,\n  WebAuthnLoginResponse,\n  WebAuthnLoginVerifyInput,\n  WebAuthnLoginVerifyResponse,\n  WebAuthnRegisterInput,\n  WebAuthnRegisterResponse,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Auth<SecurityDataType = unknown> extends HttpClient<\n  SecurityDataType\n> {\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name TransferEth\n   * @request POST:/accounts/{accountName}/transfer-eth\n   */\n  refreshToken = (data: RefreshTokenInput, params: RequestParams = {}) =>\n    this.request<RefreshTokenResponse, any>({\n      path: `/auth/refresh-token`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n\n  profile = (params: RequestParams = {}) =>\n    this.request<ProfileResponse, any>({\n      path: `/auth/profile`,\n      method: 'GET',\n      format: 'json',\n      ...params,\n    });\n  createOauth2Client(\n    data: CreateOauth2ClientInput,\n    params: RequestParams = {}\n  ) {\n    return this.request<CreateOauth2ClientResponse, any>({\n      path: `/auth/oauth/openai/create`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  }\n  moonOauth2 = (\n    query: MoonOauth2QueryParamsInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<ProfileResponse, any>({\n      path: `/auth/oauth/openai/oauth`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  moonOauth2Authorize = (\n    data: MoonOauth2AuthorizeInput,\n    params: RequestParams = {}\n  ) => {\n    return this.request<MoonOauth2AuthorizeResponse, any>({\n      path: `/auth/oauth/openai/authorize`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  };\n  moonOauth2Exchange = (\n    data: MoonOauth2ExchangeInput,\n    params: RequestParams = {}\n  ) => {\n    return this.request<MoonOauth2ExchangeResponse, any>({\n      path: `/auth/oauth/openai/exchange`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  };\n\n  googleOauth2 = (\n    query: MoonOauth2QueryParamsInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<ProfileResponse, any>({\n      path: `/auth/oauth/google`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  //oauth/google/callback\n  googleOauth2Callback = (\n    data: GoogleCallbackInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<GoogleCallbackResponse, any>({\n      path: `/auth/oauth/google/callback`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  ///oauth/google-alt'\n  googleAltOauth2 = (\n    query: MoonOauth2QueryParamsInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<ProfileResponse, any>({\n      path: `/auth/oauth/google-alt`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  //'/oauth/google-alt/callback'\n  googleAltOauth2Callback = (\n    data: GoogleAltCallbackInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<GoogleCallbackResponse, any>({\n      path: `/auth/oauth/google-alt/callback`,\n      query: data,\n      method: 'GET',\n      ...params,\n    });\n  // /email/signup'\n  emailSignup = (data: EmailSignupInput, params: RequestParams = {}) =>\n    this.request<EmailSignupResponse, any>({\n      path: `/auth/email/signup`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // /email/login'\n  emailLogin = (data: EmailLoginInput, params: RequestParams = {}) =>\n    this.request<EmailLoginResponse, any>({\n      path: `/auth/email/login`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // /oauth/github'\n  githubOauth2 = (\n    query: MoonOauth2QueryParamsInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<ProfileResponse, any>({\n      path: `/auth/oauth/github`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  // '/oauth/github/callback',\n  githubOauth2Callback = (\n    query: GithubCallbackInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<GithubCallbackResponse, any>({\n      path: `/auth/oauth/github/callback`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  // '/oauth/discord',\n  discordOAuth2 = (\n    query: MoonOauth2QueryParamsInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<ProfileResponse, any>({\n      path: `/auth/oauth/discord`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  // '/oauth/discord/callback',\n  discordOAuth2Callback = (\n    query: DiscordCallbackInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<DiscordCallbackResponse, any>({\n      path: `/auth/oauth/discord/callback`,\n      method: 'GET',\n      query: query,\n      ...params,\n    });\n  // ('/webauthn\n  webauthn = (data: RefreshTokenInput, params: RequestParams = {}) =>\n    this.request<RefreshTokenResponse, any>({\n      path: `/auth/webauthn`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // ('/webauthn/register',\n  webauthnRegister = (\n    data: WebAuthnRegisterInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<WebAuthnRegisterResponse, any>({\n      path: `/auth/webauthn/register`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // /webauth/register/verify\n  webauthnRegisterVerify = (\n    data: WebAuthNRegisterVerifyInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<WebAuthNRegisterVerifyResponse, any>({\n      path: `/auth/webauthn/register/verify`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // /webauthn/login',\n  webAuthnLogin = (data: WebAuthnLoginInput, params: RequestParams = {}) =>\n    this.request<WebAuthnLoginResponse, any>({\n      path: `/auth/webauthn/login`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n\n  // '/webauthn/login/verify',\n  webauthnLoginVerify = (\n    data: WebAuthnLoginVerifyInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<WebAuthnLoginVerifyResponse, any>({\n      path: `/auth/webauthn/login/verify`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // '/forgot-password',\n  resetPassword = (data: ResetPasswordInput, params: RequestParams = {}) =>\n    this.request<ResetPasswordResponse, any>({\n      path: `/auth/reset-password`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // /reset-password/:token',\n  resetPasswordVerify = (\n    data: ResetPasswordConfirmInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<ResetPasswordConfirmResponse, any>({\n      path: `/auth/reset-password/verify`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // '/enable-2fa';\n  enable2fa = (data: Enable2faInput, params: RequestParams = {}) =>\n    this.request<Enable2faInput, any>({\n      path: `/auth/enable-2fa`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  // /verify-2fa\n  verify2fa = (data: Verify2faInput, params: RequestParams = {}) =>\n    this.request<Verify2faResponse, any>({\n      path: `/auth/verify-2fa`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n\n  // '/disable-2fa',\n  disable2fa = (data: Disable2faInput, params: RequestParams = {}) =>\n    this.request<Disable2faInput, any>({\n      path: `/auth/disable-2fa`,\n      method: 'POST',\n      body: data,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n"],"mappings":"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","names":["HttpClient","apiConfig","fetchParams","data","input","formData","key","property","cancelToken","abortController","body","secure","path","type","query","format","baseUrl","params","secureParams","requestParams","queryString","payloadFormatter","responseFormat","response","r","e","value","v","rawQuery","params1","params2","Auth","HttpClient","data","params","query"]}