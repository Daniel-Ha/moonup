var i=class{constructor(a={}){this.baseUrl="https://vault-api.usemoon.ai/";this.securityData=null;this.abortControllers=new Map;this.customFetch=(...a)=>fetch(...a);this.baseApiParams={credentials:"same-origin",headers:{},redirect:"follow",referrerPolicy:"no-referrer"};this.setSecurityData=a=>{this.securityData=a};this.contentFormatters={"application/json":a=>a!==null&&(typeof a=="object"||typeof a=="string")?JSON.stringify(a):a,"text/plain":a=>a!==null&&typeof a!="string"?JSON.stringify(a):a,"multipart/form-data":a=>Object.keys(a||{}).reduce((e,t)=>{let s=a[t];return e.append(t,s instanceof Blob?s:typeof s=="object"&&s!==null?JSON.stringify(s):`${s}`),e},new FormData),"application/x-www-form-urlencoded":a=>this.toQueryString(a)};this.createAbortSignal=a=>{if(this.abortControllers.has(a)){let t=this.abortControllers.get(a);return t?t.signal:void 0}let e=new AbortController;return this.abortControllers.set(a,e),e.signal};this.abortRequest=a=>{let e=this.abortControllers.get(a);e&&(e.abort(),this.abortControllers.delete(a))};this.request=async({body:a,secure:e,path:t,type:s,query:p,format:b,baseUrl:f,cancelToken:r,...R})=>{let g=(typeof e=="boolean"?e:this.baseApiParams.secure)&&this.securityWorker&&await this.securityWorker(this.securityData)||{},n=this.mergeRequestParams(R,g),l=p&&this.toQueryString(p),P=this.contentFormatters[s||"application/json"],y=b||n.format;return this.customFetch(`${f||this.baseUrl||""}${t}${l?`?${l}`:""}`,{...n,headers:{...n.headers||{},...s&&s!=="multipart/form-data"?{"Content-Type":s}:{}},signal:(r?this.createAbortSignal(r):n.signal)||null,body:typeof a>"u"||a===null?null:P(a)}).then(async h=>{let o=h;o.data=null,o.error=null;let m=y?await h[y]().then(u=>(o.ok?o.data=u:o.error=u,o)).catch(u=>(o.error=u,o)):o;if(r&&this.abortControllers.delete(r),!h.ok)throw m;return m})};Object.assign(this,a)}encodeQueryParam(a,e){return`${encodeURIComponent(a)}=${encodeURIComponent(typeof e=="number"?e:`${e}`)}`}addQueryParam(a,e){return this.encodeQueryParam(e,a[e])}addArrayQueryParam(a,e){return a[e].map(s=>this.encodeQueryParam(e,s)).join("&")}toQueryString(a){let e=a||{};return Object.keys(e).filter(s=>typeof e[s]<"u").map(s=>Array.isArray(e[s])?this.addArrayQueryParam(e,s):this.addQueryParam(e,s)).join("&")}addQueryParams(a){let e=this.toQueryString(a);return e?`?${e}`:""}mergeRequestParams(a,e){return{...this.baseApiParams,...a,...e||{},headers:{...this.baseApiParams.headers||{},...a.headers||{},...e&&e.headers||{}}}}};var d=class extends i{constructor(){super(...arguments);this.refreshToken=(e,t={})=>this.request({path:"/auth/refresh-token",method:"POST",body:e,type:"application/json",format:"json",...t});this.profile=(e={})=>this.request({path:"/auth/profile",method:"GET",format:"json",...e});this.moonOauth2=(e,t={})=>this.request({path:"/auth/oauth/openai/oauth",method:"GET",query:e,...t});this.moonOauth2Authorize=(e,t={})=>this.request({path:"/auth/oauth/openai/authorize",method:"POST",body:e,type:"application/json",format:"json",...t});this.moonOauth2Exchange=(e,t={})=>this.request({path:"/auth/oauth/openai/exchange",method:"POST",body:e,type:"application/json",format:"json",...t});this.googleOauth2=(e,t={})=>this.request({path:"/auth/oauth/google",method:"GET",query:e,...t});this.googleOauth2Callback=(e,t={})=>this.request({path:"/auth/oauth/google/callback",method:"POST",body:e,type:"application/json",format:"json",...t});this.googleAltOauth2=(e,t={})=>this.request({path:"/auth/oauth/google-alt",method:"GET",query:e,...t});this.googleAltOauth2Callback=(e,t={})=>this.request({path:"/auth/oauth/google-alt/callback",query:e,method:"GET",...t});this.emailSignup=(e,t={})=>this.request({path:"/auth/email/signup",method:"POST",body:e,type:"application/json",format:"json",...t});this.emailLogin=(e,t={})=>this.request({path:"/auth/email/login",method:"POST",body:e,type:"application/json",format:"json",...t});this.githubOauth2=(e,t={})=>this.request({path:"/auth/oauth/github",method:"GET",query:e,...t});this.githubOauth2Callback=(e,t={})=>this.request({path:"/auth/oauth/github/callback",method:"GET",query:e,...t});this.discordOAuth2=(e,t={})=>this.request({path:"/auth/oauth/discord",method:"GET",query:e,...t});this.discordOAuth2Callback=(e,t={})=>this.request({path:"/auth/oauth/discord/callback",method:"GET",query:e,...t});this.webauthn=(e,t={})=>this.request({path:"/auth/webauthn",method:"POST",body:e,type:"application/json",format:"json",...t});this.webauthnRegister=(e,t={})=>this.request({path:"/auth/webauthn/register",method:"POST",body:e,type:"application/json",format:"json",...t});this.webauthnRegisterVerify=(e,t={})=>this.request({path:"/auth/webauthn/register/verify",method:"POST",body:e,type:"application/json",format:"json",...t});this.webAuthnLogin=(e,t={})=>this.request({path:"/auth/webauthn/login",method:"POST",body:e,type:"application/json",format:"json",...t});this.webauthnLoginVerify=(e,t={})=>this.request({path:"/auth/webauthn/login/verify",method:"POST",body:e,type:"application/json",format:"json",...t});this.resetPassword=(e,t={})=>this.request({path:"/auth/reset-password",method:"POST",body:e,type:"application/json",format:"json",...t});this.resetPasswordVerify=(e,t={})=>this.request({path:"/auth/reset-password/verify",method:"POST",body:e,type:"application/json",format:"json",...t});this.enable2fa=(e,t={})=>this.request({path:"/auth/enable-2fa",method:"POST",body:e,type:"application/json",format:"json",...t});this.verify2fa=(e,t={})=>this.request({path:"/auth/verify-2fa",method:"POST",body:e,type:"application/json",format:"json",...t});this.disable2fa=(e,t={})=>this.request({path:"/auth/disable-2fa",method:"POST",body:e,type:"application/json",format:"json",...t})}createOauth2Client(e,t={}){return this.request({path:"/auth/oauth/openai/create",method:"POST",body:e,type:"application/json",format:"json",...t})}};export{d as Auth};
//# sourceMappingURL=Auth.mjs.map