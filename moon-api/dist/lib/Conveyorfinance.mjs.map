{"version":3,"sources":["../../src/lib/http-client.ts","../../src/lib/Conveyorfinance.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport type QueryParamsType = Record<string | number, any>;\nexport type ResponseFormat = keyof Omit<Body, 'body' | 'bodyUsed'>;\n\nexport interface FullRequestParams extends Omit<RequestInit, 'body'> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat;\n  /** request body */\n  body?: unknown;\n  /** base url */\n  baseUrl?: string;\n  /** request cancellation token */\n  cancelToken?: CancelToken;\n}\n\nexport type RequestParams = Omit<\n  FullRequestParams,\n  'body' | 'method' | 'query' | 'path'\n>;\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string;\n  baseApiParams?: Omit<RequestParams, 'baseUrl' | 'cancelToken' | 'signal'>;\n  securityWorker?: (\n    securityData: SecurityDataType | null\n  ) => Promise<RequestParams | void> | RequestParams | void;\n  customFetch?: typeof fetch;\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown>\n  extends Response {\n  data: D;\n  error: E;\n}\n\ntype CancelToken = Symbol | string | number;\n\nexport enum ContentType {\n  Json = 'application/json',\n  FormData = 'multipart/form-data',\n  UrlEncoded = 'application/x-www-form-urlencoded',\n  Text = 'text/plain',\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = 'https://vault-api.usemoon.ai';\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker'];\n  private abortControllers = new Map<CancelToken, AbortController>();\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) =>\n    fetch(...fetchParams);\n\n  private baseApiParams: RequestParams = {\n    credentials: 'same-origin',\n    headers: {},\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer',\n  };\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig);\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key);\n    return `${encodedKey}=${encodeURIComponent(\n      typeof value === 'number' ? value : `${value}`\n    )}`;\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key]);\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key];\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join('&');\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter(\n      (key) => 'undefined' !== typeof query[key]\n    );\n    return keys\n      .map((key) =>\n        Array.isArray(query[key])\n          ? this.addArrayQueryParam(query, key)\n          : this.addQueryParam(query, key)\n      )\n      .join('&');\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : '';\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) =>\n      input !== null && (typeof input === 'object' || typeof input === 'string')\n        ? JSON.stringify(input)\n        : input,\n    [ContentType.Text]: (input: any) =>\n      input !== null && typeof input !== 'string'\n        ? JSON.stringify(input)\n        : input,\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key];\n        formData.append(\n          key,\n          property instanceof Blob\n            ? property\n            : typeof property === 'object' && property !== null\n            ? JSON.stringify(property)\n            : `${property}`\n        );\n        return formData;\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),\n  };\n\n  protected mergeRequestParams(\n    params1: RequestParams,\n    params2?: RequestParams\n  ): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected createAbortSignal = (\n    cancelToken: CancelToken\n  ): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken);\n      if (abortController) {\n        return abortController.signal;\n      }\n      return void 0;\n    }\n\n    const abortController = new AbortController();\n    this.abortControllers.set(cancelToken, abortController);\n    return abortController.signal;\n  };\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken);\n\n    if (abortController) {\n      abortController.abort();\n      this.abortControllers.delete(cancelToken);\n    }\n  };\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<HttpResponse<T, E>> => {\n    const secureParams =\n      ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const queryString = query && this.toQueryString(query);\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n    const responseFormat = format || requestParams.format;\n\n    return this.customFetch(\n      `${baseUrl || this.baseUrl || ''}${path}${\n        queryString ? `?${queryString}` : ''\n      }`,\n      {\n        ...requestParams,\n        headers: {\n          ...(requestParams.headers || {}),\n          ...(type && type !== ContentType.FormData\n            ? { 'Content-Type': type }\n            : {}),\n        },\n        signal:\n          (cancelToken\n            ? this.createAbortSignal(cancelToken)\n            : requestParams.signal) || null,\n        body:\n          typeof body === 'undefined' || body === null\n            ? null\n            : payloadFormatter(body),\n      }\n    ).then(async (response) => {\n      const r = response as HttpResponse<T, E>;\n      r.data = null as unknown as T;\n      r.error = null as unknown as E;\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then((data) => {\n              if (r.ok) {\n                r.data = data;\n              } else {\n                r.error = data;\n              }\n              return r;\n            })\n            .catch((e) => {\n              r.error = e;\n              return r;\n            });\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken);\n      }\n\n      if (!response.ok) throw data;\n      return data;\n    });\n  };\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  ConveyorFinanceControllerResponse,\n  TokenSwapParams,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Conveyorfinance<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags ConveyorFinance\n   * @name Swap\n   * @request POST:/conveyorfinance/{name}/swap\n   * @secure\n   */\n  swap = (name: string, data: TokenSwapParams, params: RequestParams = {}) =>\n    this.request<ConveyorFinanceControllerResponse, any>({\n      path: `/conveyorfinance/${name}/swap`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n"],"mappings":"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","names":["HttpClient","apiConfig","fetchParams","data","input","formData","key","property","cancelToken","abortController","body","secure","path","type","query","format","baseUrl","params","secureParams","requestParams","queryString","payloadFormatter","responseFormat","response","r","e","value","v","rawQuery","params1","params2","Conveyorfinance","HttpClient","name","data","params"]}