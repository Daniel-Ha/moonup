{"version":3,"sources":["../../src/lib/index.ts","../../src/lib/http-client.ts","../../src/lib/Aave.ts","../../src/lib/Accounts.ts","../../src/lib/Bitcoin.ts","../../src/lib/Bitcoincash.ts","../../src/lib/Conveyorfinance.ts","../../src/lib/Cosmos.ts","../../src/lib/Dogecoin.ts","../../src/lib/Ens.ts","../../src/lib/Eos.ts","../../src/lib/Erc1155.ts","../../src/lib/Erc20.ts","../../src/lib/Erc4337.ts","../../src/lib/Erc721.ts","../../src/lib/Litecoin.ts","../../src/lib/Oneinch.ts","../../src/lib/Payment.ts","../../src/lib/Ripple.ts","../../src/lib/Solana.ts","../../src/lib/Tron.ts","../../src/lib/Uniswap.ts","../../src/lib/Yearn.ts"],"sourcesContent":["export * from './Aave';\nexport * from './Accounts';\nexport * from './Bitcoin';\nexport * from './Bitcoincash';\nexport * from './Conveyorfinance';\nexport * from './Cosmos';\nexport * from './Dogecoin';\nexport * from './Ens';\nexport * from './Eos';\nexport * from './Erc1155';\nexport * from './Erc20';\nexport * from './Erc4337';\nexport * from './Erc721';\nexport * from './Litecoin';\nexport * from './Oneinch';\nexport * from './Payment';\nexport * from './Ripple';\nexport * from './Solana';\nexport * from './Tron';\nexport * from './Uniswap';\nexport * from './Yearn';\n\nexport * from './data-contracts';\nexport * from './http-client';\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport type QueryParamsType = Record<string | number, any>;\nexport type ResponseFormat = keyof Omit<Body, 'body' | 'bodyUsed'>;\n\nexport interface FullRequestParams extends Omit<RequestInit, 'body'> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat;\n  /** request body */\n  body?: unknown;\n  /** base url */\n  baseUrl?: string;\n  /** request cancellation token */\n  cancelToken?: CancelToken;\n}\n\nexport type RequestParams = Omit<\n  FullRequestParams,\n  'body' | 'method' | 'query' | 'path'\n>;\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string;\n  baseApiParams?: Omit<RequestParams, 'baseUrl' | 'cancelToken' | 'signal'>;\n  securityWorker?: (\n    securityData: SecurityDataType | null\n  ) => Promise<RequestParams | void> | RequestParams | void;\n  customFetch?: typeof fetch;\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown>\n  extends Response {\n  data: D;\n  error: E;\n}\n\ntype CancelToken = Symbol | string | number;\n\nexport enum ContentType {\n  Json = 'application/json',\n  FormData = 'multipart/form-data',\n  UrlEncoded = 'application/x-www-form-urlencoded',\n  Text = 'text/plain',\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = 'https://vault-api.usemoon.ai';\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker'];\n  private abortControllers = new Map<CancelToken, AbortController>();\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) =>\n    fetch(...fetchParams);\n\n  private baseApiParams: RequestParams = {\n    credentials: 'same-origin',\n    headers: {},\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer',\n  };\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig);\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key);\n    return `${encodedKey}=${encodeURIComponent(\n      typeof value === 'number' ? value : `${value}`\n    )}`;\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key]);\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key];\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join('&');\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter(\n      (key) => 'undefined' !== typeof query[key]\n    );\n    return keys\n      .map((key) =>\n        Array.isArray(query[key])\n          ? this.addArrayQueryParam(query, key)\n          : this.addQueryParam(query, key)\n      )\n      .join('&');\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : '';\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) =>\n      input !== null && (typeof input === 'object' || typeof input === 'string')\n        ? JSON.stringify(input)\n        : input,\n    [ContentType.Text]: (input: any) =>\n      input !== null && typeof input !== 'string'\n        ? JSON.stringify(input)\n        : input,\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key];\n        formData.append(\n          key,\n          property instanceof Blob\n            ? property\n            : typeof property === 'object' && property !== null\n            ? JSON.stringify(property)\n            : `${property}`\n        );\n        return formData;\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),\n  };\n\n  protected mergeRequestParams(\n    params1: RequestParams,\n    params2?: RequestParams\n  ): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected createAbortSignal = (\n    cancelToken: CancelToken\n  ): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken);\n      if (abortController) {\n        return abortController.signal;\n      }\n      return void 0;\n    }\n\n    const abortController = new AbortController();\n    this.abortControllers.set(cancelToken, abortController);\n    return abortController.signal;\n  };\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken);\n\n    if (abortController) {\n      abortController.abort();\n      this.abortControllers.delete(cancelToken);\n    }\n  };\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<HttpResponse<T, E>> => {\n    const secureParams =\n      ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const queryString = query && this.toQueryString(query);\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n    const responseFormat = format || requestParams.format;\n\n    return this.customFetch(\n      `${baseUrl || this.baseUrl || ''}${path}${\n        queryString ? `?${queryString}` : ''\n      }`,\n      {\n        ...requestParams,\n        headers: {\n          ...(requestParams.headers || {}),\n          ...(type && type !== ContentType.FormData\n            ? { 'Content-Type': type }\n            : {}),\n        },\n        signal:\n          (cancelToken\n            ? this.createAbortSignal(cancelToken)\n            : requestParams.signal) || null,\n        body:\n          typeof body === 'undefined' || body === null\n            ? null\n            : payloadFormatter(body),\n      }\n    ).then(async (response) => {\n      const r = response as HttpResponse<T, E>;\n      r.data = null as unknown as T;\n      r.error = null as unknown as E;\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then((data) => {\n              if (r.ok) {\n                r.data = data;\n              } else {\n                r.error = data;\n              }\n              return r;\n            })\n            .catch((e) => {\n              r.error = e;\n              return r;\n            });\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken);\n      }\n\n      if (!response.ok) throw data;\n      return data;\n    });\n  };\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AaveInput, AccountControllerResponse } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Aave<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Aave\n   * @name Lend\n   * @request POST:/aave/{name}/lend\n   * @secure\n   */\n  lend = (name: string, data: AaveInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/aave/${name}/lend`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Aave\n   * @name Borrow\n   * @request POST:/aave/{name}/borrow\n   * @secure\n   */\n  borrow = (name: string, data: AaveInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/aave/${name}/borrow`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Aave\n   * @name UserReserveData\n   * @request POST:/aave/{name}/user-reserve-data\n   * @secure\n   */\n  userReserveData = (\n    name: string,\n    data: AaveInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/aave/${name}/user-reserve-data`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Aave\n   * @name Repay\n   * @request POST:/aave/{name}/repay\n   * @secure\n   */\n  repay = (name: string, data: AaveInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/aave/${name}/repay`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  BroadcastInput,\n  CreateAccountInput,\n  DeployInput,\n  InputBody,\n  SignMessage,\n  SignTypedData,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Accounts<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name GetNonce\n   * @request GET:/accounts/{accountName}/nonce\n   * @secure\n   */\n  getNonce = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/nonce`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name GetBalance\n   * @request GET:/accounts/{accountName}/balance\n   * @secure\n   */\n  getBalance = (\n    accountName: string,\n    query: {\n      chainId: string;\n    },\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/balance`,\n      method: 'GET',\n      query: query,\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name TransferEth\n   * @request POST:/accounts/{accountName}/transfer-eth\n   * @secure\n   */\n  transferEth = (\n    accountName: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/transfer-eth`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name SignMessage\n   * @request POST:/accounts/{accountName}/sign-message\n   * @secure\n   */\n  signMessage = (\n    accountName: string,\n    data: SignMessage,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/sign-message`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name SignTransaction\n   * @request POST:/accounts/{accountName}/sign-transaction\n   * @secure\n   */\n  signTransaction = (\n    accountName: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/sign-transaction`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name SignTypedData\n   * @request POST:/accounts/{accountName}/sign-typed-data\n   * @secure\n   */\n  signTypedData = (\n    accountName: string,\n    data: SignTypedData,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/sign-typed-data`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name ListAccounts\n   * @request GET:/accounts\n   * @secure\n   */\n  listAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name CreateAccount\n   * @request POST:/accounts\n   * @secure\n   */\n  createAccount = (data: CreateAccountInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name GetAccount\n   * @request GET:/accounts/{accountName}\n   * @secure\n   */\n  getAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name DeleteAccount\n   * @request DELETE:/accounts/{accountName}\n   * @secure\n   */\n  deleteAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}`,\n      method: 'DELETE',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name DeployContract\n   * @request POST:/accounts/{accountName}/deploy\n   * @secure\n   */\n  deployContract = (\n    accountName: string,\n    data: DeployInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/deploy`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Accounts\n   * @name BroadcastTx\n   * @request POST:/accounts/{accountName}/broadcast-tx\n   * @secure\n   */\n  broadcastTx = (\n    accountName: string,\n    data: BroadcastInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/accounts/${accountName}/broadcast-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  BitcoinInput,\n  BitcoinTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Bitcoin<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Bitcoin\n   * @name ListBitcoinAccounts\n   * @request GET:/bitcoin\n   * @secure\n   */\n  listBitcoinAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoin`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Bitcoin\n   * @name CreateBitcoinAccount\n   * @request POST:/bitcoin\n   * @secure\n   */\n  createBitcoinAccount = (data: BitcoinInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoin`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Bitcoin\n   * @name GetBitcoinAccount\n   * @request GET:/bitcoin/{accountName}\n   * @secure\n   */\n  getBitcoinAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoin/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Bitcoin\n   * @name SignBitcoinTransaction\n   * @request POST:/bitcoin/{accountName}/sign-tx\n   * @secure\n   */\n  signBitcoinTransaction = (\n    accountName: string,\n    data: BitcoinTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoin/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  BitcoinCashInput,\n  BitcoinCashTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Bitcoincash<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags bitcoincash\n   * @name ListBitcoinCashAccounts\n   * @request GET:/bitcoincash\n   * @secure\n   */\n  listBitcoinCashAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoincash`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags bitcoincash\n   * @name CreateBitcoinCashAccount\n   * @request POST:/bitcoincash\n   * @secure\n   */\n  createBitcoinCashAccount = (\n    data: BitcoinCashInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoincash`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags bitcoincash\n   * @name GetBitcoinCashAccount\n   * @request GET:/bitcoincash/{accountName}\n   * @secure\n   */\n  getBitcoinCashAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoincash/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags bitcoincash\n   * @name SignBitcoinCashTransaction\n   * @request POST:/bitcoincash/{accountName}/sign-tx\n   * @secure\n   */\n  signBitcoinCashTransaction = (\n    accountName: string,\n    data: BitcoinCashTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/bitcoincash/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  ConveyorFinanceControllerResponse,\n  TokenSwapParams,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Conveyorfinance<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags ConveyorFinance\n   * @name Swap\n   * @request POST:/conveyorfinance/{name}/swap\n   * @secure\n   */\n  swap = (name: string, data: TokenSwapParams, params: RequestParams = {}) =>\n    this.request<ConveyorFinanceControllerResponse, any>({\n      path: `/conveyorfinance/${name}/swap`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  CosmosInput,\n  CosmosTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Cosmos<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Cosmos\n   * @name ListCosmosAccounts\n   * @request GET:/cosmos\n   * @secure\n   */\n  listCosmosAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/cosmos`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Cosmos\n   * @name CreateCosmosAccount\n   * @request POST:/cosmos\n   * @secure\n   */\n  createCosmosAccount = (data: CosmosInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/cosmos`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Cosmos\n   * @name GetCosmosAccount\n   * @request GET:/cosmos/{accountName}\n   * @secure\n   */\n  getCosmosAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/cosmos/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Cosmos\n   * @name SignCosmosTransaction\n   * @request POST:/cosmos/{accountName}/sign-tx\n   * @secure\n   */\n  signCosmosTransaction = (\n    accountName: string,\n    data: CosmosTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/cosmos/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  DogeCoinInput,\n  DogeCoinTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Dogecoin<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags DogeCoin\n   * @name ListDogeCoinAccounts\n   * @request GET:/dogecoin\n   * @secure\n   */\n  listDogeCoinAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/dogecoin`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags DogeCoin\n   * @name CreateDogeCoinAccount\n   * @request POST:/dogecoin\n   * @secure\n   */\n  createDogeCoinAccount = (data: DogeCoinInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/dogecoin`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags DogeCoin\n   * @name GetDogeCoinAccount\n   * @request GET:/dogecoin/{accountName}\n   * @secure\n   */\n  getDogeCoinAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/dogecoin/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags DogeCoin\n   * @name SignDogeCoinTransaction\n   * @request POST:/dogecoin/{accountName}/sign-tx\n   * @secure\n   */\n  signDogeCoinTransaction = (\n    accountName: string,\n    data: DogeCoinTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/dogecoin/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, EnsResolveInput } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Ens<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags ENS\n   * @name Resolve\n   * @request POST:/ens/resolve\n   * @secure\n   */\n  resolve = (data: EnsResolveInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/ens/resolve`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  EosInput,\n  EosTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Eos<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags eos\n   * @name ListEosAccounts\n   * @request GET:/eos\n   * @secure\n   */\n  listEosAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/eos`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags eos\n   * @name CreateEosAccount\n   * @request POST:/eos\n   * @secure\n   */\n  createEosAccount = (data: EosInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/eos`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags eos\n   * @name GetEosAccount\n   * @request GET:/eos/{accountName}\n   * @secure\n   */\n  getEosAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/eos/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags eos\n   * @name SignEosTransaction\n   * @request POST:/eos/{accountName}/sign-tx\n   * @secure\n   */\n  signEosTransaction = (\n    accountName: string,\n    data: EosTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/eos/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, Erc1155Request } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Erc1155<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags ERC1155\n   * @name BalanceOf\n   * @request POST:/erc1155/{name}/balance-of\n   * @secure\n   */\n  balanceOf = (\n    name: string,\n    data: Erc1155Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc1155/${name}/balance-of`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ERC1155\n   * @name BalanceOfBatch\n   * @request POST:/erc1155/{name}/balance-of-batch\n   * @secure\n   */\n  balanceOfBatch = (\n    name: string,\n    data: Erc1155Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc1155/${name}/balance-of-batch`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ERC1155\n   * @name SetApprovalForAll\n   * @request POST:/erc1155/{name}/set-approval-for-all\n   * @secure\n   */\n  setApprovalForAll = (\n    name: string,\n    data: Erc1155Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc1155/${name}/set-approval-for-all`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ERC1155\n   * @name IsApprovedForAll\n   * @request POST:/erc1155/{name}/is-approved-for-all\n   * @secure\n   */\n  isApprovedForAll = (\n    name: string,\n    data: Erc1155Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc1155/${name}/is-approved-for-all`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ERC1155\n   * @name SafeTransferFrom\n   * @request POST:/erc1155/{name}/safe-transfer-from\n   * @secure\n   */\n  safeTransferFrom = (\n    name: string,\n    data: Erc1155Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc1155/${name}/safe-transfer-from`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ERC1155\n   * @name SafeBatchTransferFrom\n   * @request POST:/erc1155/{name}/safe-batch-transfer-from\n   * @secure\n   */\n  safeBatchTransferFrom = (\n    name: string,\n    data: Erc1155Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc1155/${name}/safe-batch-transfer-from`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, InputBody } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Erc20<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name NameErc20\n   * @request POST:/erc20/{name}/name\n   * @secure\n   */\n  nameErc20 = (name: string, data: InputBody, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/name`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name SymbolErc20\n   * @request POST:/erc20/{name}/symbol\n   * @secure\n   */\n  symbolErc20 = (name: string, data: InputBody, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/symbol`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name DecimalsErc20\n   * @request POST:/erc20/{name}/decimals\n   * @secure\n   */\n  decimalsErc20 = (name: string, data: InputBody, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/decimals`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name TotalSupplyErc20\n   * @request POST:/erc20/{name}/total-supply\n   * @secure\n   */\n  totalSupplyErc20 = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/total-supply`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name BalanceOfErc20\n   * @request POST:/erc20/{name}/balance-of\n   * @secure\n   */\n  balanceOfErc20 = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/balance-of`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name AllowanceErc20\n   * @request POST:/erc20/{name}/allowance\n   * @secure\n   */\n  allowanceErc20 = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/allowance`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name TransferErc20\n   * @request POST:/erc20/{name}/transfer\n   * @secure\n   */\n  transferErc20 = (name: string, data: InputBody, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/transfer`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name ApproveErc20\n   * @request POST:/erc20/{name}/approve\n   * @secure\n   */\n  approveErc20 = (name: string, data: InputBody, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/approve`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc20\n   * @name TransferFromErc20\n   * @request POST:/erc20/{name}/transfer-from\n   * @secure\n   */\n  transferFromErc20 = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc20/${name}/transfer-from`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, InputBody } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Erc4337<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Erc4337\n   * @name GetAddress\n   * @request POST:/erc4337/{accountName}/address\n   * @secure\n   */\n  getAddress = (\n    accountName: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc4337/${accountName}/address`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc4337\n   * @name SignBroadcastUserOpTx\n   * @request POST:/erc4337/{accountName}/sign-broadcast-userop-tx\n   * @secure\n   */\n  signBroadcastUserOpTx = (\n    accountName: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc4337/${accountName}/sign-broadcast-userop-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, Erc721Request } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Erc721<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name TokenUri\n   * @request POST:/erc721/{name}/token-uri\n   * @secure\n   */\n  tokenUri = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/token-uri`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name Transfer\n   * @request POST:/erc721/{name}/transfer\n   * @secure\n   */\n  transfer = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/transfer`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name TransferFrom\n   * @request POST:/erc721/{name}/transfer-from\n   * @secure\n   */\n  transferFrom = (\n    name: string,\n    data: Erc721Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/transfer-from`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name Approve\n   * @request POST:/erc721/{name}/approve\n   * @secure\n   */\n  approve = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/approve`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name GetApproved\n   * @request POST:/erc721/{name}/get-approved\n   * @secure\n   */\n  getApproved = (\n    name: string,\n    data: Erc721Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/get-approved`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name IsApprovedForAll\n   * @request POST:/erc721/{name}/is-approved-for-all\n   * @secure\n   */\n  isApprovedForAll = (\n    name: string,\n    data: Erc721Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/is-approved-for-all`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name Name\n   * @request POST:/erc721/{name}/name\n   * @secure\n   */\n  name = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/name`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name Symbol\n   * @request POST:/erc721/{name}/symbol\n   * @secure\n   */\n  symbol = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/symbol`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name BalanceOf\n   * @request POST:/erc721/{name}/balance-of\n   * @secure\n   */\n  balanceOf = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/balance-of`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name OwnerOf\n   * @request POST:/erc721/{name}/owner-of\n   * @secure\n   */\n  ownerOf = (name: string, data: Erc721Request, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/owner-of`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name SafeTransferFrom\n   * @request POST:/erc721/{name}/safe-transfer-from\n   * @secure\n   */\n  safeTransferFrom = (\n    name: string,\n    data: Erc721Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/safe-transfer-from`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Erc721\n   * @name SetApprovalForAll\n   * @request POST:/erc721/{name}/set-approval-for-all\n   * @secure\n   */\n  setApprovalForAll = (\n    name: string,\n    data: Erc721Request,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/erc721/${name}/set-approval-for-all`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  LitecoinInput,\n  LitecoinTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Litecoin<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Litecoin\n   * @name ListLitecoinAccounts\n   * @request GET:/litecoin\n   * @secure\n   */\n  listLitecoinAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/litecoin`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Litecoin\n   * @name CreateLitecoinAccount\n   * @request POST:/litecoin\n   * @secure\n   */\n  createLitecoinAccount = (data: LitecoinInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/litecoin`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Litecoin\n   * @name GetLitecoinAccount\n   * @request GET:/litecoin/{accountName}\n   * @secure\n   */\n  getLitecoinAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/litecoin/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Litecoin\n   * @name SignLitecoinTransaction\n   * @request POST:/litecoin/{accountName}/sign-tx\n   * @secure\n   */\n  signLitecoinTransaction = (\n    accountName: string,\n    data: LitecoinTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/litecoin/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { GetSwapDto } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Oneinch<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags oneinch\n   * @name Tokens\n   * @request POST:/oneinch/tokens\n   * @secure\n   */\n  tokens = (data: any, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/oneinch/tokens`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags oneinch\n   * @name Protocols\n   * @request POST:/oneinch/protocols\n   * @secure\n   */\n  protocols = (data: any, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/oneinch/protocols`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags oneinch\n   * @name Quote\n   * @request POST:/oneinch/quote\n   * @secure\n   */\n  quote = (data: any, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/oneinch/quote`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags oneinch\n   * @name Swap\n   * @request POST:/oneinch/{accountName}/swap\n   * @secure\n   */\n  swap = (accountName: string, data: GetSwapDto, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/oneinch/${accountName}/swap`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags oneinch\n   * @name ApproveSpender\n   * @request POST:/oneinch/approve-spender\n   * @secure\n   */\n  approveSpender = (data: any, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/oneinch/approve-spender`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags oneinch\n   * @name ApproveCallData\n   * @request POST:/oneinch/approve-call-data\n   * @secure\n   */\n  approveCallData = (data: any, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/oneinch/approve-call-data`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  CreatePaymentIntentInput,\n  IWebhook,\n  PaymentIntentResponse,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Payment<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name PaymentGetAvailableChains\n   * @request GET:/payment/chains\n   * @secure\n   */\n  paymentGetAvailableChains = (params: RequestParams = {}) =>\n    this.request<string[], any>({\n      path: `/payment/chains`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name PaymentCreatePaymentIntent\n   * @request POST:/payment\n   * @secure\n   */\n  paymentCreatePaymentIntent = (\n    data: CreatePaymentIntentInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<PaymentIntentResponse, any>({\n      path: `/payment`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name PaymentGetAllPaymentIntents\n   * @request GET:/payment\n   * @secure\n   */\n  paymentGetAllPaymentIntents = (params: RequestParams = {}) =>\n    this.request<PaymentIntentResponse[], any>({\n      path: `/payment`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name PaymentDeletePaymentIntent\n   * @request DELETE:/payment/{id}\n   * @secure\n   */\n  paymentDeletePaymentIntent = (id: string, params: RequestParams = {}) =>\n    this.request<PaymentIntentResponse, any>({\n      path: `/payment/${id}`,\n      method: 'DELETE',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name PaymentUpdatePaymentIntent\n   * @request PUT:/payment/{id}\n   * @secure\n   */\n  paymentUpdatePaymentIntent = (\n    id: string,\n    data: CreatePaymentIntentInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<PaymentIntentResponse, any>({\n      path: `/payment/${id}`,\n      method: 'PUT',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name PaymentGetPaymentIntent\n   * @request GET:/payment/{id}\n   * @secure\n   */\n  paymentGetPaymentIntent = (id: string, params: RequestParams = {}) =>\n    this.request<PaymentIntentResponse, any>({\n      path: `/payment/${id}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name MoralisWebhook\n   * @request POST:/payment/webhook/{id}\n   * @secure\n   */\n  moralisWebhook = (id: string, data: IWebhook, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/payment/webhook/${id}`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags payment\n   * @name TatumWebhook\n   * @request POST:/payment/tatum/webhook/{id}\n   * @secure\n   */\n  tatumWebhook = (id: string, data: any, params: RequestParams = {}) =>\n    this.request<any, any>({\n      path: `/payment/tatum/webhook/${id}`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  RippleInput,\n  RippleTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Ripple<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags ripple\n   * @name ListRippleAccounts\n   * @request GET:/ripple\n   * @secure\n   */\n  listRippleAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/ripple`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ripple\n   * @name CreateRippleAccount\n   * @request POST:/ripple\n   * @secure\n   */\n  createRippleAccount = (data: RippleInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/ripple`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ripple\n   * @name GetRippleAccount\n   * @request GET:/ripple/{accountName}\n   * @secure\n   */\n  getRippleAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/ripple/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags ripple\n   * @name SignRippleTransaction\n   * @request POST:/ripple/{accountName}/sign-tx\n   * @secure\n   */\n  signRippleTransaction = (\n    accountName: string,\n    data: RippleTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/ripple/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  SolanaInput,\n  SolanaTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Solana<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Solana\n   * @name ListSolanaAccounts\n   * @request GET:/solana\n   * @secure\n   */\n  listSolanaAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/solana`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Solana\n   * @name CreateSolanaAccount\n   * @request POST:/solana\n   * @secure\n   */\n  createSolanaAccount = (data: SolanaInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/solana`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Solana\n   * @name GetSolanaAccount\n   * @request GET:/solana/{accountName}\n   * @secure\n   */\n  getSolanaAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/solana/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Solana\n   * @name SignSolanaTransaction\n   * @request POST:/solana/{accountName}/sign-tx\n   * @secure\n   */\n  signSolanaTransaction = (\n    accountName: string,\n    data: SolanaTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/solana/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport {\n  AccountControllerResponse,\n  TronInput,\n  TronTransactionInput,\n} from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Tron<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags Tron\n   * @name ListTronAccounts\n   * @request GET:/tron\n   * @secure\n   */\n  listTronAccounts = (params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/tron`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Tron\n   * @name CreateTronAccount\n   * @request POST:/tron\n   * @secure\n   */\n  createTronAccount = (data: TronInput, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/tron`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Tron\n   * @name GetTronAccount\n   * @request GET:/tron/{accountName}\n   * @secure\n   */\n  getTronAccount = (accountName: string, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/tron/${accountName}`,\n      method: 'GET',\n      secure: true,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags Tron\n   * @name SignTronTransaction\n   * @request POST:/tron/{accountName}/sign-tx\n   * @secure\n   */\n  signTronTransaction = (\n    accountName: string,\n    data: TronTransactionInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/tron/${accountName}/sign-tx`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, UniswapInput } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Uniswap<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags UniSwap\n   * @name AddLiquidity\n   * @request POST:/uniswap/{name}/add-liquidity\n   * @secure\n   */\n  addLiquidity = (\n    name: string,\n    data: UniswapInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/uniswap/${name}/add-liquidity`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags UniSwap\n   * @name RemoveLiquidity\n   * @request POST:/uniswap/{name}/remove-liquidity\n   * @secure\n   */\n  removeLiquidity = (\n    name: string,\n    data: UniswapInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/uniswap/${name}/remove-liquidity`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags UniSwap\n   * @name SwapExactTokensForTokens\n   * @request POST:/uniswap/{name}/swap-exact-tokens-for-tokens\n   * @secure\n   */\n  swapExactTokensForTokens = (\n    name: string,\n    data: UniswapInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/uniswap/${name}/swap-exact-tokens-for-tokens`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags UniSwap\n   * @name SwapExactEthForTokens\n   * @request POST:/uniswap/{name}/swap-exact-eth-for-tokens\n   * @secure\n   */\n  swapExactEthForTokens = (\n    name: string,\n    data: UniswapInput,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/uniswap/${name}/swap-exact-eth-for-tokens`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nimport { AccountControllerResponse, InputBody } from './data-contracts';\nimport { ContentType, HttpClient, RequestParams } from './http-client';\n\nexport class Yearn<\n  SecurityDataType = unknown,\n> extends HttpClient<SecurityDataType> {\n  /**\n   * No description\n   *\n   * @tags yearn\n   * @name AddLiquidity\n   * @request POST:/yearn/{name}/add-liquidity\n   * @secure\n   */\n  addLiquidity = (name: string, data: InputBody, params: RequestParams = {}) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/yearn/${name}/add-liquidity`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags yearn\n   * @name RemoveLiquidity\n   * @request POST:/yearn/{name}/remove-liquidity\n   * @secure\n   */\n  removeLiquidity = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/yearn/${name}/remove-liquidity`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags yearn\n   * @name AddLiquidityWeth\n   * @request POST:/yearn/{name}/add-liquidity-weth\n   * @secure\n   */\n  addLiquidityWeth = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/yearn/${name}/add-liquidity-weth`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n  /**\n   * No description\n   *\n   * @tags yearn\n   * @name RemoveLiquidityWeth\n   * @request POST:/yearn/{name}/remove-liquidity-weth\n   * @secure\n   */\n  removeLiquidityWeth = (\n    name: string,\n    data: InputBody,\n    params: RequestParams = {}\n  ) =>\n    this.request<AccountControllerResponse, any>({\n      path: `/yearn/${name}/remove-liquidity-weth`,\n      method: 'POST',\n      body: data,\n      secure: true,\n      type: ContentType.Json,\n      format: 'json',\n      ...params,\n    });\n}\n"],"mappings":"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","names":["lib_exports","__export","Aave","Accounts","Bitcoin","Bitcoincash","ContentType","Conveyorfinance","Cosmos","Dogecoin","Ens","Eos","Erc1155","Erc20","Erc4337","Erc721","HttpClient","Litecoin","Oneinch","Payment","Ripple","Solana","Tron","Uniswap","Yearn","__toCommonJS","ContentType","HttpClient","apiConfig","fetchParams","data","input","formData","key","property","cancelToken","abortController","body","secure","path","type","query","format","baseUrl","params","secureParams","requestParams","queryString","payloadFormatter","responseFormat","response","r","e","value","v","rawQuery","params1","params2","Aave","HttpClient","name","data","params","Accounts","HttpClient","accountName","params","query","data","Bitcoin","HttpClient","params","data","accountName","Bitcoincash","HttpClient","params","data","accountName","Conveyorfinance","HttpClient","name","data","params","Cosmos","HttpClient","params","data","accountName","Dogecoin","HttpClient","params","data","accountName","Ens","HttpClient","data","params","Eos","HttpClient","params","data","accountName","Erc1155","HttpClient","name","data","params","Erc20","HttpClient","name","data","params","Erc4337","HttpClient","accountName","data","params","Erc721","HttpClient","name","data","params","Litecoin","HttpClient","params","data","accountName","Oneinch","HttpClient","data","params","accountName","Payment","HttpClient","params","data","id","Ripple","HttpClient","params","data","accountName","Solana","HttpClient","params","data","accountName","Tron","HttpClient","params","data","accountName","Uniswap","HttpClient","name","data","params","Yearn","HttpClient","name","data","params"]}