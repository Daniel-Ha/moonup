{"version":3,"sources":["../src/auth.ts"],"sourcesContent":["import { AUTH, MoonAuthConfig, MoonToken } from '@moonup/moon-types';\n\n/**\n * The `moonAuthConfig` function takes a `MoonAuthConfig` object as its\n * parameter and returns a `MoonToken`. It is used to configure authentication\n * settings for the MoonUp library.\n *\n * The `MoonAuthConfig` object has the following properties: - `AuthType`: a\n * string that specifies the type of authentication. It can be one of the\n * following values: \"OAUTH2\", \"JWT\", or \"X_API_KEY\". - `CLIENT_ID`: (only for\n * OAuth2) a string that represents the client ID. - `CLIENT_SECRET`: (only for\n * OAuth2) a string that represents the client secret. - `REDIRECT_URI`: (only\n * for OAuth2) a string that represents the redirect URI.\n *\n * The returned `MoonToken` object has the following properties: - `type`: a\n * string that indicates the type of authentication token. It can be one of the\n * following values: \"OAUTH2\", \"JWT\", or \"X_API_KEY\". - `securityWorker`: an\n * async function that handles security-related tasks. It takes a `securityData`\n * object as its parameter and returns a Promise that resolves to an object\n * containing headers for authorization. - The `securityData` object has a\n * `token` property, which represents the authentication token. - The resolved\n * object contains headers with an Authorization field, which includes the\n * token.\n *\n * If no valid authentication type is provided in the `MoonAuthConfig` object,\n * the function defaults to using JWT authentication with the same security\n * worker implementation.\n *\n * Overall, this function allows you to configure authentication settings and\n * obtain a token object that can be used for subsequent API calls in the MoonUp\n * library.\n */\nexport const moonAuthConfig = (config: MoonAuthConfig): MoonToken => {\n  switch (config.AuthType) {\n    case AUTH.OAUTH2:\n      return {\n        type: AUTH.OAUTH2,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return {\n            headers: {\n              Authorization: `Bearer ${securityData.token}`,\n            },\n          };\n        },\n        CLIENT_ID: config.CLIENT_ID,\n        CLIENT_SECRET: config.CLIENT_SECRET,\n        REDIRECT_URI: config.REDIRECT_URI,\n      };\n    case AUTH.JWT:\n      return {\n        type: AUTH.JWT,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return Promise.resolve({\n            headers: {\n              Authorization: `Bearer ${securityData.token}`,\n            },\n          });\n        },\n      };\n    case AUTH.X_API_KEY:\n      return {\n        type: AUTH.X_API_KEY,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return {\n            headers: {\n              'x-api-key': `${securityData.token}`,\n            },\n          };\n        },\n      };\n    default:\n      return {\n        type: AUTH.JWT,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return {\n            headers: {\n              Authorization: `Bearer ${securityData.token}`,\n            },\n          };\n        },\n      };\n  }\n};\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAgD,8BAgCnCF,EAAkBG,GAAsC,CACnE,OAAQA,EAAO,SAAU,CACvB,KAAK,OAAK,OACR,MAAO,CACL,KAAM,OAAK,OAEX,eAAgB,MAAOC,IACd,CACL,QAAS,CACP,cAAe,UAAUA,EAAa,KAAK,EAC7C,CACF,GAEF,UAAWD,EAAO,UAClB,cAAeA,EAAO,cACtB,aAAcA,EAAO,YACvB,EACF,KAAK,OAAK,IACR,MAAO,CACL,KAAM,OAAK,IAEX,eAAgB,MAAOC,GACd,QAAQ,QAAQ,CACrB,QAAS,CACP,cAAe,UAAUA,EAAa,KAAK,EAC7C,CACF,CAAC,CAEL,EACF,KAAK,OAAK,UACR,MAAO,CACL,KAAM,OAAK,UAEX,eAAgB,MAAOA,IACd,CACL,QAAS,CACP,YAAa,GAAGA,EAAa,KAAK,EACpC,CACF,EAEJ,EACF,QACE,MAAO,CACL,KAAM,OAAK,IAEX,eAAgB,MAAOA,IACd,CACL,QAAS,CACP,cAAe,UAAUA,EAAa,KAAK,EAC7C,CACF,EAEJ,CACJ,CACF","names":["auth_exports","__export","moonAuthConfig","__toCommonJS","import_moon_types","config","securityData"]}