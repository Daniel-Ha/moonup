{"version":3,"sources":["../src/moon.ts","../src/auth.ts","../src/messages.ts"],"sourcesContent":["import {\n  TypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { BytesLike, arrayify } from '@ethersproject/bytes';\nimport { hashMessage } from '@ethersproject/hash';\nimport { JsonRpcProvider, TransactionResponse } from '@ethersproject/providers';\nimport {\n  Aave,\n  AccountResponse,\n  Accounts,\n  Auth,\n  Bitcoin,\n  Bitcoincash,\n  BroadCastRawTransactionResponse,\n  ContentType,\n  Conveyorfinance,\n  Cosmos,\n  Dogecoin,\n  Ens,\n  Eos,\n  Erc1155,\n  Erc20,\n  Erc4337,\n  Erc721,\n  InputBody,\n  Litecoin,\n  Transaction as MoonTransaction,\n  Oneinch,\n  RefreshTokenResponse,\n  Ripple,\n  Solana,\n  TransactionData,\n  Tron,\n  Uniswap,\n  Yearn,\n} from '@moonup/moon-api';\nimport {\n  Chain,\n  MOON_SUPPORTED_NETWORKS,\n  MoonAccount,\n  MoonConfig,\n  MoonSDKConfig,\n  MoonStorage,\n} from '@moonup/moon-types';\n\nimport { moonAuthConfig } from './auth';\nimport { MoonMessageHandler } from './messages';\nimport { IframeController } from './viewController';\n\nexport class MoonSDK {\n  private AccountsSDK: Accounts;\n  private AaveSDK: Aave;\n  private ConveyorfinanceSDK: Conveyorfinance;\n  private ENSSDK: Ens;\n  private Erc20SDK: Erc20;\n  private Erc1155SDK: Erc1155;\n  private Erc721SDK: Erc721;\n  private Erc4337SDK: Erc4337;\n  private OneinchSDK: Oneinch;\n  private UniswapSDK: Uniswap;\n  private YearnSDK: Yearn;\n  private AuthSDK: Auth;\n  private BitcoinSDK: Bitcoin;\n  private SolanaSDK: Solana;\n  private CosmosSDK: Cosmos;\n  private EosSDK: Eos;\n  private LitecoinSDK: Litecoin;\n  private RippleSDK: Ripple;\n  private TronSDK: Tron;\n  private BitcoincashSDK: Bitcoincash;\n  private DogecoinSDK: Dogecoin;\n  MoonProvider: JsonRpcProvider | undefined;\n  MoonSDKConfig: MoonSDKConfig;\n  MoonAccount: MoonAccount;\n  MoonMessageHandler: MoonMessageHandler;\n  MoonIframe: IframeController | undefined;\n\n  constructor(config: MoonConfig) {\n    this.MoonSDKConfig = this.initialiseConfig(config);\n\n    this.MoonAccount = new MoonAccount(this.MoonSDKConfig.Storage);\n\n    this.MoonMessageHandler = new MoonMessageHandler();\n    this.AccountsSDK = new Accounts({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.AuthSDK = new Auth({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n    });\n\n    this.AaveSDK = new Aave({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.ENSSDK = new Ens({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.Erc20SDK = new Erc20({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.Erc1155SDK = new Erc1155({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.Erc721SDK = new Erc721({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.Erc4337SDK = new Erc4337({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.OneinchSDK = new Oneinch({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.UniswapSDK = new Uniswap({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.YearnSDK = new Yearn({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.ConveyorfinanceSDK = new Conveyorfinance({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.BitcoinSDK = new Bitcoin({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.BitcoincashSDK = new Bitcoincash({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.DogecoinSDK = new Dogecoin({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.SolanaSDK = new Solana({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n    this.CosmosSDK = new Cosmos({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.EosSDK = new Eos({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.LitecoinSDK = new Litecoin({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.RippleSDK = new Ripple({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n\n    this.TronSDK = new Tron({\n      baseUrl: 'https://vault-api.usemoon.ai',\n      baseApiParams: {\n        secure: true,\n        type: ContentType.Json,\n        format: 'json',\n      },\n      securityWorker: this.MoonSDKConfig.Auth.securityWorker,\n    });\n  }\n  public login(): void {\n    this.getMoonAccount().login();\n    this.updateToken(this.getMoonAccount().getToken());\n  }\n\n  public getSolanaSDK(): Solana {\n    return this.SolanaSDK;\n  }\n\n  public getBitcoinSDK(): Bitcoin {\n    return this.BitcoinSDK;\n  }\n\n  public getCosmosSDK(): Cosmos {\n    return this.CosmosSDK;\n  }\n\n  public getEosSDK(): Eos {\n    return this.EosSDK;\n  }\n\n  public getLitecoinSDK(): Litecoin {\n    return this.LitecoinSDK;\n  }\n\n  public getRippleSDK(): Ripple {\n    return this.RippleSDK;\n  }\n\n  public getTronSDK(): Tron {\n    return this.TronSDK;\n  }\n\n  public getBitcoincashSDK(): Bitcoincash {\n    return this.BitcoincashSDK;\n  }\n\n  public getDogecoinSDK(): Dogecoin {\n    return this.DogecoinSDK;\n  }\n\n  public getAuthSDK(): Auth {\n    return this.AuthSDK;\n  }\n\n  public getAccountsSDK(): Accounts {\n    return this.AccountsSDK;\n  }\n\n  public getAaveSDK(): Aave {\n    return this.AaveSDK;\n  }\n\n  public getConveyorfinanceSDK(): Conveyorfinance {\n    return this.ConveyorfinanceSDK;\n  }\n\n  public getENSSDK(): Ens {\n    return this.ENSSDK;\n  }\n\n  public getErc20SDK(): Erc20 {\n    return this.Erc20SDK;\n  }\n\n  public getErc1155SDK(): Erc1155 {\n    return this.Erc1155SDK;\n  }\n\n  public getErc721SDK(): Erc721 {\n    return this.Erc721SDK;\n  }\n\n  public getErc4337SDK(): Erc4337 {\n    return this.Erc4337SDK;\n  }\n\n  public getOneinchSDK(): Oneinch {\n    return this.OneinchSDK;\n  }\n\n  public getUniswapSDK(): Uniswap {\n    return this.UniswapSDK;\n  }\n\n  public getYearnSDK(): Yearn {\n    this.YearnSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    return this.YearnSDK;\n  }\n  public getMoonAccount(): MoonAccount {\n    return this.MoonAccount;\n  }\n\n  public updateRefreshToken(refreshToken: string) {\n    this.MoonAccount.setRefreshToken(refreshToken);\n  }\n\n  public updateToken(token: string) {\n    this.MoonAccount.setToken(token);\n    this.BitcoinSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.AccountsSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.AaveSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.ConveyorfinanceSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.ENSSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.Erc20SDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.Erc1155SDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.Erc721SDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.Erc4337SDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.OneinchSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.UniswapSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n    this.SolanaSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.CosmosSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.EosSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.LitecoinSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.RippleSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.TronSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.BitcoincashSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n\n    this.DogecoinSDK.setSecurityData({\n      token: this.MoonAccount.getToken(),\n    });\n  }\n\n  public async refreshAccount(): Promise<RefreshTokenResponse> {\n    const token = this.MoonAccount.getRefreshToken();\n    const response = await this.getAuthSDK().refreshToken({\n      refreshToken: token,\n    });\n    this.updateToken(response.data.accessToken);\n    // return response.data;\n    return response.data as RefreshTokenResponse;\n  }\n\n  public async listAccounts(): Promise<AccountResponse> {\n    const response = await this.getAccountsSDK().listAccounts();\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.data as AccountResponse;\n  }\n  transactionRequestToInputBody(tx: TransactionResponse): InputBody {\n    return {\n      chain_id: BigNumber.from(tx.chainId).toString(),\n      data: tx.data,\n      to: tx.to,\n      gasPrice: BigNumber.from(tx.gasPrice).toString(),\n      gas: BigNumber.from(tx.gasLimit).toString(),\n      nonce: BigNumber.from(tx.nonce).toString(),\n      value: tx.value && BigNumber.from(tx.value).toString(),\n      encoding: 'utf-8',\n    };\n  }\n  moonTransactionResponseToTransactions(\n    tx: MoonTransaction\n  ): TransactionData[] {\n    return tx.transactions || [];\n  }\n\n  public async SignTransaction(\n    transaction: TransactionResponse\n  ): Promise<string> {\n    const response = await this.getAccountsSDK()\n      .signTransaction(\n        this.MoonAccount.getWallet(),\n        this.transactionRequestToInputBody(transaction)\n      )\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const transactions = this.moonTransactionResponseToTransactions(\n          res.data.data as MoonTransaction\n        );\n        const rawTransaction = transactions?.at(0)?.raw_transaction;\n        return rawTransaction as string;\n      });\n    return response || '';\n  }\n\n  public async SignMessage(message: BytesLike): Promise<string> {\n    const hash = new Uint8Array(arrayify(hashMessage(message)));\n    const response = await this.getAccountsSDK()\n      .signMessage(this.MoonAccount.getWallet(), {\n        data: hash.toString(),\n        encoding: 'utf-8',\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n\n  public async SignTypedData(\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    value: Record<string, string>\n  ): Promise<string> {\n    const response = await this.getAccountsSDK()\n      .signTypedData(this.MoonAccount.getWallet(), {\n        data: JSON.stringify({\n          domain,\n          types,\n          value,\n        }),\n      })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.data.data as TransactionData;\n      });\n    return response.signed_message || '';\n  }\n\n  public async SendTransaction(\n    rawTransaction: string\n  ): Promise<BroadCastRawTransactionResponse> {\n    const response = await this.getAccountsSDK().broadcastTx(\n      this.MoonAccount.getWallet(),\n      {\n        rawTransaction: rawTransaction,\n        chainId: this.MoonAccount.getNetwork().chainId,\n      }\n    );\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.data.data as BroadCastRawTransactionResponse;\n  }\n  private initialiseConfig(config: MoonConfig): MoonSDKConfig {\n    const sdkConfig = {\n      Auth: moonAuthConfig(config.Auth),\n      Storage: new MoonStorage(config.Storage.type, config.Storage.key),\n      Networks: config.Networks || MOON_SUPPORTED_NETWORKS,\n    };\n\n    return sdkConfig;\n  }\n  public updateConfig(config: MoonConfig) {\n    this.MoonSDKConfig = this.initialiseConfig(config);\n  }\n\n  public getNetworks(): Chain[] {\n    return this.MoonSDKConfig.Networks;\n  }\n\n  public updateAccount(account: MoonAccount) {\n    this.MoonAccount = account;\n    this.MoonSDKConfig.Storage.setItem(account);\n  }\n\n  public updateWallet(wallet: string) {\n    this.MoonAccount.setWallet(wallet);\n    this.MoonSDKConfig.Storage.setItem(this.MoonAccount);\n  }\n\n  public async connect(): Promise<MoonAccount> {\n    const account = new MoonAccount(this.MoonSDKConfig.Storage);\n    this.getMoonAccount().login();\n    if (account.getToken() != '' && account.getRefreshToken() != '') {\n      // check if account is expired\n      if (account.getExpiry() < Date.now()) {\n        // refresh account\n        const refresh = await this.refreshAccount();\n        this.updateToken(refresh.accessToken);\n      }\n    }\n\n    return new MoonAccount(this.MoonSDKConfig.Storage);\n  }\n\n  public updateNetwork(network: Chain) {\n    this.MoonAccount.setNetwork(network);\n  }\n\n  public async disconnect() {\n    // this.MoonSDKConfig.Storage.removeItem();\n    // this.MoonAccount = {\n    //   token: '',\n    //   email: '',\n    //   expiry: 0,\n    //   refreshToken: '',\n    //   wallet: '',\n    //   network: MOON_SUPPORTED_NETWORKS[0],\n    // };\n    // await this.MoonMessageHandler.handle({\n    //   type: MoonMessageType.logout,\n    //   data: this.MoonAccount,\n    // });\n    // return this.MoonAccount;\n  }\n\n  async logout(): Promise<void> {\n    this.MoonAccount.logout();\n  }\n}\n","import { AUTH, MoonAuthConfig, MoonToken } from '@moonup/moon-types';\n\n/**\n * The `moonAuthConfig` function takes a `MoonAuthConfig` object as its\n * parameter and returns a `MoonToken`. It is used to configure authentication\n * settings for the MoonUp library.\n *\n * The `MoonAuthConfig` object has the following properties: - `AuthType`: a\n * string that specifies the type of authentication. It can be one of the\n * following values: \"OAUTH2\", \"JWT\", or \"X_API_KEY\". - `CLIENT_ID`: (only for\n * OAuth2) a string that represents the client ID. - `CLIENT_SECRET`: (only for\n * OAuth2) a string that represents the client secret. - `REDIRECT_URI`: (only\n * for OAuth2) a string that represents the redirect URI.\n *\n * The returned `MoonToken` object has the following properties: - `type`: a\n * string that indicates the type of authentication token. It can be one of the\n * following values: \"OAUTH2\", \"JWT\", or \"X_API_KEY\". - `securityWorker`: an\n * async function that handles security-related tasks. It takes a `securityData`\n * object as its parameter and returns a Promise that resolves to an object\n * containing headers for authorization. - The `securityData` object has a\n * `token` property, which represents the authentication token. - The resolved\n * object contains headers with an Authorization field, which includes the\n * token.\n *\n * If no valid authentication type is provided in the `MoonAuthConfig` object,\n * the function defaults to using JWT authentication with the same security\n * worker implementation.\n *\n * Overall, this function allows you to configure authentication settings and\n * obtain a token object that can be used for subsequent API calls in the MoonUp\n * library.\n */\nexport const moonAuthConfig = (config: MoonAuthConfig): MoonToken => {\n  switch (config.AuthType) {\n    case AUTH.OAUTH2:\n      return {\n        type: AUTH.OAUTH2,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return {\n            headers: {\n              Authorization: `Bearer ${securityData.token}`,\n            },\n          };\n        },\n        CLIENT_ID: config.CLIENT_ID,\n        CLIENT_SECRET: config.CLIENT_SECRET,\n        REDIRECT_URI: config.REDIRECT_URI,\n      };\n    case AUTH.JWT:\n      return {\n        type: AUTH.JWT,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return Promise.resolve({\n            headers: {\n              Authorization: `Bearer ${securityData.token}`,\n            },\n          });\n        },\n      };\n    case AUTH.X_API_KEY:\n      return {\n        type: AUTH.X_API_KEY,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return {\n            headers: {\n              'x-api-key': `${securityData.token}`,\n            },\n          };\n        },\n      };\n    default:\n      return {\n        type: AUTH.JWT,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        securityWorker: async (securityData: any) => {\n          return {\n            headers: {\n              Authorization: `Bearer ${securityData.token}`,\n            },\n          };\n        },\n      };\n  }\n};\n","import { EventEmitter } from 'events';\nexport interface MoonMessage {\n  type: string;\n  data: string;\n}\n\nexport interface MoonMessageResponse {\n  type: string;\n  data: string;\n}\nexport enum MoonMessageType {\n  login = 'MOON_LOGIN',\n  logout = 'MOON_LOGOUT',\n}\n\nexport class MoonMessageHandler {\n  EventEmitter: EventEmitter;\n\n  constructor() {\n    this.EventEmitter = new EventEmitter();\n\n    // // Add event listeners for MoonAccount related events\n    // this.EventEmitter.on('updateToken', this.updateToken.bind(this));\n    // this.EventEmitter.on(\n    //   'updateRefreshToken',\n    //   this.updateRefreshToken.bind(this)\n    // );\n  }\n\n  emit(type: string, data: string) {\n    this.EventEmitter.emit(type, data);\n  }\n\n  async handle(message: MoonMessage): Promise<MoonMessageResponse> {\n    this.EventEmitter.emit(message.type, message.data);\n    return {\n      type: message.type,\n      data: message.data,\n    };\n  }\n\n  //   // Function to handle 'updateToken' event\n  //   updateToken(newToken: string) {\n  //     this.moonAccount.token = newToken;\n  //   }\n\n  //   // Function to handle 'updateRefreshToken' event\n  //   updateRefreshToken(newRefreshToken: string) {\n  //     this.moonAccount.refreshToken = newRefreshToken;\n  //   }\n}\n"],"mappings":"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","names":["moon_exports","__export","MoonSDK","__toCommonJS","import_bignumber","import_bytes","import_hash","import_moon_api","import_moon_types","import_moon_types","moonAuthConfig","config","securityData","import_events","MoonMessageHandler","type","data","message","MoonSDK","config","MoonMessageHandler","refreshToken","token","response","tx","transaction","res","message","hash","domain","types","value","rawTransaction","moonAuthConfig","account","wallet","refresh","network"]}