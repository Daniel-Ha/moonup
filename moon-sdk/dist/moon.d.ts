import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer';
import { BytesLike } from '@ethersproject/bytes';
import { JsonRpcProvider, TransactionResponse } from '@ethersproject/providers';
import { Solana, Bitcoin, Cosmos, Eos, Litecoin, Ripple, Tron, Bitcoincash, Dogecoin, Auth, Accounts, Aave, Conveyorfinance, Ens, Erc20, Erc1155, Erc721, Erc4337, Oneinch, Uniswap, Yearn, RefreshTokenResponse, AccountResponse, InputBody, Transaction, TransactionData, BroadCastRawTransactionResponse } from '@moonup/moon-api';
import { MoonSDKConfig, MoonAccount, MoonConfig, Chain } from '@moonup/moon-types';
import { MoonMessageHandler } from './messages.js';
import { IframeController } from './viewController.js';
import 'events';

declare class MoonSDK {
    private AccountsSDK;
    private AaveSDK;
    private ConveyorfinanceSDK;
    private ENSSDK;
    private Erc20SDK;
    private Erc1155SDK;
    private Erc721SDK;
    private Erc4337SDK;
    private OneinchSDK;
    private UniswapSDK;
    private YearnSDK;
    private AuthSDK;
    private BitcoinSDK;
    private SolanaSDK;
    private CosmosSDK;
    private EosSDK;
    private LitecoinSDK;
    private RippleSDK;
    private TronSDK;
    private BitcoincashSDK;
    private DogecoinSDK;
    MoonProvider: JsonRpcProvider | undefined;
    MoonSDKConfig: MoonSDKConfig;
    MoonAccount: MoonAccount;
    MoonMessageHandler: MoonMessageHandler;
    MoonIframe: IframeController | undefined;
    constructor(config: MoonConfig);
    login(): void;
    getSolanaSDK(): Solana;
    getBitcoinSDK(): Bitcoin;
    getCosmosSDK(): Cosmos;
    getEosSDK(): Eos;
    getLitecoinSDK(): Litecoin;
    getRippleSDK(): Ripple;
    getTronSDK(): Tron;
    getBitcoincashSDK(): Bitcoincash;
    getDogecoinSDK(): Dogecoin;
    getAuthSDK(): Auth;
    getAccountsSDK(): Accounts;
    getAaveSDK(): Aave;
    getConveyorfinanceSDK(): Conveyorfinance;
    getENSSDK(): Ens;
    getErc20SDK(): Erc20;
    getErc1155SDK(): Erc1155;
    getErc721SDK(): Erc721;
    getErc4337SDK(): Erc4337;
    getOneinchSDK(): Oneinch;
    getUniswapSDK(): Uniswap;
    getYearnSDK(): Yearn;
    getMoonAccount(): MoonAccount;
    updateRefreshToken(refreshToken: string): void;
    updateToken(token: string): void;
    refreshAccount(): Promise<RefreshTokenResponse>;
    listAccounts(): Promise<AccountResponse>;
    transactionRequestToInputBody(tx: TransactionResponse): InputBody;
    moonTransactionResponseToTransactions(tx: Transaction): TransactionData[];
    SignTransaction(transaction: TransactionResponse): Promise<string>;
    SignMessage(message: BytesLike): Promise<string>;
    SignTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, string>): Promise<string>;
    SendTransaction(rawTransaction: string): Promise<BroadCastRawTransactionResponse>;
    private initialiseConfig;
    updateConfig(config: MoonConfig): void;
    getNetworks(): Chain[];
    updateAccount(account: MoonAccount): void;
    updateWallet(wallet: string): void;
    connect(): Promise<MoonAccount>;
    updateNetwork(network: Chain): void;
    disconnect(): Promise<void>;
    logout(): Promise<void>;
}

export { MoonSDK };
